/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sematext.spm.client.tracing.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.nio.ByteBuffer;
import java.util.*;

/**
 * Transaction call.
 * 
 */
public class TCall implements org.apache.thrift.TBase<TCall, TCall._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TCall");

  private static final org.apache.thrift.protocol.TField CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("callId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCallId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField LEVEL_FIELD_DESC = new org.apache.thrift.protocol.TField("level", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SELF_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("selfDuration", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SIGNATURE_FIELD_DESC = new org.apache.thrift.protocol.TField("signature", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField EXTERNAL_FIELD_DESC = new org.apache.thrift.protocol.TField("external", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField TAG_FIELD_DESC = new org.apache.thrift.protocol.TField("tag", org.apache.thrift.protocol.TType.I32, (short)19);
  private static final org.apache.thrift.protocol.TField ENTRY_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPoint", org.apache.thrift.protocol.TType.BOOL, (short)21);
  private static final org.apache.thrift.protocol.TField CROSS_APP_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("crossAppToken", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField CROSS_APP_CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crossAppCallId", org.apache.thrift.protocol.TType.I64, (short)23);
  private static final org.apache.thrift.protocol.TField CROSS_APP_PARENT_CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("crossAppParentCallId", org.apache.thrift.protocol.TType.I64, (short)24);
  private static final org.apache.thrift.protocol.TField CROSS_APP_DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("crossAppDuration", org.apache.thrift.protocol.TType.I64, (short)25);
  private static final org.apache.thrift.protocol.TField CROSS_APP_SAMPLED_FIELD_DESC = new org.apache.thrift.protocol.TField("crossAppSampled", org.apache.thrift.protocol.TType.BOOL, (short)27);
  private static final org.apache.thrift.protocol.TField ANNOTATION_FIELD_DESC = new org.apache.thrift.protocol.TField("annotation", org.apache.thrift.protocol.TType.STRING, (short)28);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)29);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TCallStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TCallTupleSchemeFactory());
  }

  public long callId; // required
  public long parentCallId; // required
  public int level; // required
  public long startTimestamp; // required
  public long endTimestamp; // required
  public long duration; // required
  public long selfDuration; // required
  public String signature; // required
  public boolean failed; // optional
  public boolean external; // optional
  /**
   * 
   * @see TCallTag
   */
  public TCallTag tag; // required
  public boolean entryPoint; // required
  /**
   * * Cross application call credentials. Current call is caller, credentials are for callee. Used to identify root call
   *  * for callee transaction
   * *
   */
  public String crossAppToken; // optional
  public long crossAppCallId; // optional
  public long crossAppParentCallId; // optional
  public long crossAppDuration; // optional
  public boolean crossAppSampled; // optional
  /**
   * Thrift encoded annotation.
   * Depends on tag (see TCallTag)
   * 
   */
  public ByteBuffer annotation; // optional
  public Map<String,String> parameters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALL_ID((short)1, "callId"),
    PARENT_CALL_ID((short)2, "parentCallId"),
    LEVEL((short)4, "level"),
    START_TIMESTAMP((short)6, "startTimestamp"),
    END_TIMESTAMP((short)7, "endTimestamp"),
    DURATION((short)8, "duration"),
    SELF_DURATION((short)9, "selfDuration"),
    SIGNATURE((short)11, "signature"),
    FAILED((short)14, "failed"),
    EXTERNAL((short)15, "external"),
    /**
     * 
     * @see TCallTag
     */
    TAG((short)19, "tag"),
    ENTRY_POINT((short)21, "entryPoint"),
    /**
     * * Cross application call credentials. Current call is caller, credentials are for callee. Used to identify root call
     *  * for callee transaction
     * *
     */
    CROSS_APP_TOKEN((short)22, "crossAppToken"),
    CROSS_APP_CALL_ID((short)23, "crossAppCallId"),
    CROSS_APP_PARENT_CALL_ID((short)24, "crossAppParentCallId"),
    CROSS_APP_DURATION((short)25, "crossAppDuration"),
    CROSS_APP_SAMPLED((short)27, "crossAppSampled"),
    /**
     * Thrift encoded annotation.
     * Depends on tag (see TCallTag)
     * 
     */
    ANNOTATION((short)28, "annotation"),
    PARAMETERS((short)29, "parameters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALL_ID
          return CALL_ID;
        case 2: // PARENT_CALL_ID
          return PARENT_CALL_ID;
        case 4: // LEVEL
          return LEVEL;
        case 6: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 7: // END_TIMESTAMP
          return END_TIMESTAMP;
        case 8: // DURATION
          return DURATION;
        case 9: // SELF_DURATION
          return SELF_DURATION;
        case 11: // SIGNATURE
          return SIGNATURE;
        case 14: // FAILED
          return FAILED;
        case 15: // EXTERNAL
          return EXTERNAL;
        case 19: // TAG
          return TAG;
        case 21: // ENTRY_POINT
          return ENTRY_POINT;
        case 22: // CROSS_APP_TOKEN
          return CROSS_APP_TOKEN;
        case 23: // CROSS_APP_CALL_ID
          return CROSS_APP_CALL_ID;
        case 24: // CROSS_APP_PARENT_CALL_ID
          return CROSS_APP_PARENT_CALL_ID;
        case 25: // CROSS_APP_DURATION
          return CROSS_APP_DURATION;
        case 27: // CROSS_APP_SAMPLED
          return CROSS_APP_SAMPLED;
        case 28: // ANNOTATION
          return ANNOTATION;
        case 29: // PARAMETERS
          return PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CALLID_ISSET_ID = 0;
  private static final int __PARENTCALLID_ISSET_ID = 1;
  private static final int __LEVEL_ISSET_ID = 2;
  private static final int __STARTTIMESTAMP_ISSET_ID = 3;
  private static final int __ENDTIMESTAMP_ISSET_ID = 4;
  private static final int __DURATION_ISSET_ID = 5;
  private static final int __SELFDURATION_ISSET_ID = 6;
  private static final int __FAILED_ISSET_ID = 7;
  private static final int __EXTERNAL_ISSET_ID = 8;
  private static final int __ENTRYPOINT_ISSET_ID = 9;
  private static final int __CROSSAPPCALLID_ISSET_ID = 10;
  private static final int __CROSSAPPPARENTCALLID_ISSET_ID = 11;
  private static final int __CROSSAPPDURATION_ISSET_ID = 12;
  private static final int __CROSSAPPSAMPLED_ISSET_ID = 13;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FAILED, _Fields.EXTERNAL, _Fields.CROSS_APP_TOKEN, _Fields.CROSS_APP_CALL_ID, _Fields.CROSS_APP_PARENT_CALL_ID, _Fields.CROSS_APP_DURATION, _Fields.CROSS_APP_SAMPLED, _Fields.ANNOTATION, _Fields.PARAMETERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("callId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("parentCallId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LEVEL, new org.apache.thrift.meta_data.FieldMetaData("level", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SELF_DURATION, new org.apache.thrift.meta_data.FieldMetaData("selfDuration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SIGNATURE, new org.apache.thrift.meta_data.FieldMetaData("signature", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.EXTERNAL, new org.apache.thrift.meta_data.FieldMetaData("external", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TAG, new org.apache.thrift.meta_data.FieldMetaData("tag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TCallTag.class)));
    tmpMap.put(_Fields.ENTRY_POINT, new org.apache.thrift.meta_data.FieldMetaData("entryPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CROSS_APP_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("crossAppToken", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CROSS_APP_CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("crossAppCallId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CROSS_APP_PARENT_CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("crossAppParentCallId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CROSS_APP_DURATION, new org.apache.thrift.meta_data.FieldMetaData("crossAppDuration", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CROSS_APP_SAMPLED, new org.apache.thrift.meta_data.FieldMetaData("crossAppSampled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ANNOTATION, new org.apache.thrift.meta_data.FieldMetaData("annotation", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TCall.class, metaDataMap);
  }

  public TCall() {
    this.tag = com.sematext.spm.client.tracing.thrift.TCallTag.REGULAR;

  }

  public TCall(
    long callId,
    long parentCallId,
    int level,
    long startTimestamp,
    long endTimestamp,
    long duration,
    long selfDuration,
    String signature,
    TCallTag tag,
    boolean entryPoint)
  {
    this();
    this.callId = callId;
    setCallIdIsSet(true);
    this.parentCallId = parentCallId;
    setParentCallIdIsSet(true);
    this.level = level;
    setLevelIsSet(true);
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    this.endTimestamp = endTimestamp;
    setEndTimestampIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.selfDuration = selfDuration;
    setSelfDurationIsSet(true);
    this.signature = signature;
    this.tag = tag;
    this.entryPoint = entryPoint;
    setEntryPointIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TCall(TCall other) {
    __isset_bitfield = other.__isset_bitfield;
    this.callId = other.callId;
    this.parentCallId = other.parentCallId;
    this.level = other.level;
    this.startTimestamp = other.startTimestamp;
    this.endTimestamp = other.endTimestamp;
    this.duration = other.duration;
    this.selfDuration = other.selfDuration;
    if (other.isSetSignature()) {
      this.signature = other.signature;
    }
    this.failed = other.failed;
    this.external = other.external;
    if (other.isSetTag()) {
      this.tag = other.tag;
    }
    this.entryPoint = other.entryPoint;
    if (other.isSetCrossAppToken()) {
      this.crossAppToken = other.crossAppToken;
    }
    this.crossAppCallId = other.crossAppCallId;
    this.crossAppParentCallId = other.crossAppParentCallId;
    this.crossAppDuration = other.crossAppDuration;
    this.crossAppSampled = other.crossAppSampled;
    if (other.isSetAnnotation()) {
      this.annotation = org.apache.thrift.TBaseHelper.copyBinary(other.annotation);
;
    }
    if (other.isSetParameters()) {
      Map<String,String> __this__parameters = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.parameters.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__parameters_copy_key = other_element_key;

        String __this__parameters_copy_value = other_element_value;

        __this__parameters.put(__this__parameters_copy_key, __this__parameters_copy_value);
      }
      this.parameters = __this__parameters;
    }
  }

  public TCall deepCopy() {
    return new TCall(this);
  }

  @Override
  public void clear() {
    setCallIdIsSet(false);
    this.callId = 0;
    setParentCallIdIsSet(false);
    this.parentCallId = 0;
    setLevelIsSet(false);
    this.level = 0;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    setEndTimestampIsSet(false);
    this.endTimestamp = 0;
    setDurationIsSet(false);
    this.duration = 0;
    setSelfDurationIsSet(false);
    this.selfDuration = 0;
    this.signature = null;
    setFailedIsSet(false);
    this.failed = false;
    setExternalIsSet(false);
    this.external = false;
    this.tag = com.sematext.spm.client.tracing.thrift.TCallTag.REGULAR;

    setEntryPointIsSet(false);
    this.entryPoint = false;
    this.crossAppToken = null;
    setCrossAppCallIdIsSet(false);
    this.crossAppCallId = 0;
    setCrossAppParentCallIdIsSet(false);
    this.crossAppParentCallId = 0;
    setCrossAppDurationIsSet(false);
    this.crossAppDuration = 0;
    setCrossAppSampledIsSet(false);
    this.crossAppSampled = false;
    this.annotation = null;
    this.parameters = null;
  }

  public long getCallId() {
    return this.callId;
  }

  public TCall setCallId(long callId) {
    this.callId = callId;
    setCallIdIsSet(true);
    return this;
  }

  public void unsetCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLID_ISSET_ID);
  }

  /** Returns true if field callId is set (has been assigned a value) and false otherwise */
  public boolean isSetCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __CALLID_ISSET_ID);
  }

  public void setCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLID_ISSET_ID, value);
  }

  public long getParentCallId() {
    return this.parentCallId;
  }

  public TCall setParentCallId(long parentCallId) {
    this.parentCallId = parentCallId;
    setParentCallIdIsSet(true);
    return this;
  }

  public void unsetParentCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTCALLID_ISSET_ID);
  }

  /** Returns true if field parentCallId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTCALLID_ISSET_ID);
  }

  public void setParentCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTCALLID_ISSET_ID, value);
  }

  public int getLevel() {
    return this.level;
  }

  public TCall setLevel(int level) {
    this.level = level;
    setLevelIsSet(true);
    return this;
  }

  public void unsetLevel() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  /** Returns true if field level is set (has been assigned a value) and false otherwise */
  public boolean isSetLevel() {
    return EncodingUtils.testBit(__isset_bitfield, __LEVEL_ISSET_ID);
  }

  public void setLevelIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEVEL_ISSET_ID, value);
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public TCall setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    return this;
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public long getEndTimestamp() {
    return this.endTimestamp;
  }

  public TCall setEndTimestamp(long endTimestamp) {
    this.endTimestamp = endTimestamp;
    setEndTimestampIsSet(true);
    return this;
  }

  public void unsetEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  public void setEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public TCall setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public long getSelfDuration() {
    return this.selfDuration;
  }

  public TCall setSelfDuration(long selfDuration) {
    this.selfDuration = selfDuration;
    setSelfDurationIsSet(true);
    return this;
  }

  public void unsetSelfDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SELFDURATION_ISSET_ID);
  }

  /** Returns true if field selfDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetSelfDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __SELFDURATION_ISSET_ID);
  }

  public void setSelfDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SELFDURATION_ISSET_ID, value);
  }

  public String getSignature() {
    return this.signature;
  }

  public TCall setSignature(String signature) {
    this.signature = signature;
    return this;
  }

  public void unsetSignature() {
    this.signature = null;
  }

  /** Returns true if field signature is set (has been assigned a value) and false otherwise */
  public boolean isSetSignature() {
    return this.signature != null;
  }

  public void setSignatureIsSet(boolean value) {
    if (!value) {
      this.signature = null;
    }
  }

  public boolean isFailed() {
    return this.failed;
  }

  public TCall setFailed(boolean failed) {
    this.failed = failed;
    setFailedIsSet(true);
    return this;
  }

  public void unsetFailed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILED_ISSET_ID);
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean isSetFailed() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILED_ISSET_ID);
  }

  public void setFailedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILED_ISSET_ID, value);
  }

  public boolean isExternal() {
    return this.external;
  }

  public TCall setExternal(boolean external) {
    this.external = external;
    setExternalIsSet(true);
    return this;
  }

  public void unsetExternal() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EXTERNAL_ISSET_ID);
  }

  /** Returns true if field external is set (has been assigned a value) and false otherwise */
  public boolean isSetExternal() {
    return EncodingUtils.testBit(__isset_bitfield, __EXTERNAL_ISSET_ID);
  }

  public void setExternalIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EXTERNAL_ISSET_ID, value);
  }

  /**
   * 
   * @see TCallTag
   */
  public TCallTag getTag() {
    return this.tag;
  }

  /**
   * 
   * @see TCallTag
   */
  public TCall setTag(TCallTag tag) {
    this.tag = tag;
    return this;
  }

  public void unsetTag() {
    this.tag = null;
  }

  /** Returns true if field tag is set (has been assigned a value) and false otherwise */
  public boolean isSetTag() {
    return this.tag != null;
  }

  public void setTagIsSet(boolean value) {
    if (!value) {
      this.tag = null;
    }
  }

  public boolean isEntryPoint() {
    return this.entryPoint;
  }

  public TCall setEntryPoint(boolean entryPoint) {
    this.entryPoint = entryPoint;
    setEntryPointIsSet(true);
    return this;
  }

  public void unsetEntryPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID);
  }

  /** Returns true if field entryPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID);
  }

  public void setEntryPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID, value);
  }

  /**
   * * Cross application call credentials. Current call is caller, credentials are for callee. Used to identify root call
   *  * for callee transaction
   * *
   */
  public String getCrossAppToken() {
    return this.crossAppToken;
  }

  /**
   * * Cross application call credentials. Current call is caller, credentials are for callee. Used to identify root call
   *  * for callee transaction
   * *
   */
  public TCall setCrossAppToken(String crossAppToken) {
    this.crossAppToken = crossAppToken;
    return this;
  }

  public void unsetCrossAppToken() {
    this.crossAppToken = null;
  }

  /** Returns true if field crossAppToken is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossAppToken() {
    return this.crossAppToken != null;
  }

  public void setCrossAppTokenIsSet(boolean value) {
    if (!value) {
      this.crossAppToken = null;
    }
  }

  public long getCrossAppCallId() {
    return this.crossAppCallId;
  }

  public TCall setCrossAppCallId(long crossAppCallId) {
    this.crossAppCallId = crossAppCallId;
    setCrossAppCallIdIsSet(true);
    return this;
  }

  public void unsetCrossAppCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSAPPCALLID_ISSET_ID);
  }

  /** Returns true if field crossAppCallId is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossAppCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSAPPCALLID_ISSET_ID);
  }

  public void setCrossAppCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSAPPCALLID_ISSET_ID, value);
  }

  public long getCrossAppParentCallId() {
    return this.crossAppParentCallId;
  }

  public TCall setCrossAppParentCallId(long crossAppParentCallId) {
    this.crossAppParentCallId = crossAppParentCallId;
    setCrossAppParentCallIdIsSet(true);
    return this;
  }

  public void unsetCrossAppParentCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSAPPPARENTCALLID_ISSET_ID);
  }

  /** Returns true if field crossAppParentCallId is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossAppParentCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSAPPPARENTCALLID_ISSET_ID);
  }

  public void setCrossAppParentCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSAPPPARENTCALLID_ISSET_ID, value);
  }

  public long getCrossAppDuration() {
    return this.crossAppDuration;
  }

  public TCall setCrossAppDuration(long crossAppDuration) {
    this.crossAppDuration = crossAppDuration;
    setCrossAppDurationIsSet(true);
    return this;
  }

  public void unsetCrossAppDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSAPPDURATION_ISSET_ID);
  }

  /** Returns true if field crossAppDuration is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossAppDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSAPPDURATION_ISSET_ID);
  }

  public void setCrossAppDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSAPPDURATION_ISSET_ID, value);
  }

  public boolean isCrossAppSampled() {
    return this.crossAppSampled;
  }

  public TCall setCrossAppSampled(boolean crossAppSampled) {
    this.crossAppSampled = crossAppSampled;
    setCrossAppSampledIsSet(true);
    return this;
  }

  public void unsetCrossAppSampled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CROSSAPPSAMPLED_ISSET_ID);
  }

  /** Returns true if field crossAppSampled is set (has been assigned a value) and false otherwise */
  public boolean isSetCrossAppSampled() {
    return EncodingUtils.testBit(__isset_bitfield, __CROSSAPPSAMPLED_ISSET_ID);
  }

  public void setCrossAppSampledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CROSSAPPSAMPLED_ISSET_ID, value);
  }

  /**
   * Thrift encoded annotation.
   * Depends on tag (see TCallTag)
   * 
   */
  public byte[] getAnnotation() {
    setAnnotation(org.apache.thrift.TBaseHelper.rightSize(annotation));
    return annotation == null ? null : annotation.array();
  }

  public ByteBuffer bufferForAnnotation() {
    return annotation;
  }

  /**
   * Thrift encoded annotation.
   * Depends on tag (see TCallTag)
   * 
   */
  public TCall setAnnotation(byte[] annotation) {
    setAnnotation(annotation == null ? (ByteBuffer)null : ByteBuffer.wrap(annotation));
    return this;
  }

  public TCall setAnnotation(ByteBuffer annotation) {
    this.annotation = annotation;
    return this;
  }

  public void unsetAnnotation() {
    this.annotation = null;
  }

  /** Returns true if field annotation is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnotation() {
    return this.annotation != null;
  }

  public void setAnnotationIsSet(boolean value) {
    if (!value) {
      this.annotation = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public void putToParameters(String key, String val) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String,String>();
    }
    this.parameters.put(key, val);
  }

  public Map<String,String> getParameters() {
    return this.parameters;
  }

  public TCall setParameters(Map<String,String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CALL_ID:
      if (value == null) {
        unsetCallId();
      } else {
        setCallId((Long)value);
      }
      break;

    case PARENT_CALL_ID:
      if (value == null) {
        unsetParentCallId();
      } else {
        setParentCallId((Long)value);
      }
      break;

    case LEVEL:
      if (value == null) {
        unsetLevel();
      } else {
        setLevel((Integer)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStartTimestamp();
      } else {
        setStartTimestamp((Long)value);
      }
      break;

    case END_TIMESTAMP:
      if (value == null) {
        unsetEndTimestamp();
      } else {
        setEndTimestamp((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case SELF_DURATION:
      if (value == null) {
        unsetSelfDuration();
      } else {
        setSelfDuration((Long)value);
      }
      break;

    case SIGNATURE:
      if (value == null) {
        unsetSignature();
      } else {
        setSignature((String)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unsetFailed();
      } else {
        setFailed((Boolean)value);
      }
      break;

    case EXTERNAL:
      if (value == null) {
        unsetExternal();
      } else {
        setExternal((Boolean)value);
      }
      break;

    case TAG:
      if (value == null) {
        unsetTag();
      } else {
        setTag((TCallTag)value);
      }
      break;

    case ENTRY_POINT:
      if (value == null) {
        unsetEntryPoint();
      } else {
        setEntryPoint((Boolean)value);
      }
      break;

    case CROSS_APP_TOKEN:
      if (value == null) {
        unsetCrossAppToken();
      } else {
        setCrossAppToken((String)value);
      }
      break;

    case CROSS_APP_CALL_ID:
      if (value == null) {
        unsetCrossAppCallId();
      } else {
        setCrossAppCallId((Long)value);
      }
      break;

    case CROSS_APP_PARENT_CALL_ID:
      if (value == null) {
        unsetCrossAppParentCallId();
      } else {
        setCrossAppParentCallId((Long)value);
      }
      break;

    case CROSS_APP_DURATION:
      if (value == null) {
        unsetCrossAppDuration();
      } else {
        setCrossAppDuration((Long)value);
      }
      break;

    case CROSS_APP_SAMPLED:
      if (value == null) {
        unsetCrossAppSampled();
      } else {
        setCrossAppSampled((Boolean)value);
      }
      break;

    case ANNOTATION:
      if (value == null) {
        unsetAnnotation();
      } else {
        setAnnotation((ByteBuffer)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CALL_ID:
      return Long.valueOf(getCallId());

    case PARENT_CALL_ID:
      return Long.valueOf(getParentCallId());

    case LEVEL:
      return Integer.valueOf(getLevel());

    case START_TIMESTAMP:
      return Long.valueOf(getStartTimestamp());

    case END_TIMESTAMP:
      return Long.valueOf(getEndTimestamp());

    case DURATION:
      return Long.valueOf(getDuration());

    case SELF_DURATION:
      return Long.valueOf(getSelfDuration());

    case SIGNATURE:
      return getSignature();

    case FAILED:
      return Boolean.valueOf(isFailed());

    case EXTERNAL:
      return Boolean.valueOf(isExternal());

    case TAG:
      return getTag();

    case ENTRY_POINT:
      return Boolean.valueOf(isEntryPoint());

    case CROSS_APP_TOKEN:
      return getCrossAppToken();

    case CROSS_APP_CALL_ID:
      return Long.valueOf(getCrossAppCallId());

    case CROSS_APP_PARENT_CALL_ID:
      return Long.valueOf(getCrossAppParentCallId());

    case CROSS_APP_DURATION:
      return Long.valueOf(getCrossAppDuration());

    case CROSS_APP_SAMPLED:
      return Boolean.valueOf(isCrossAppSampled());

    case ANNOTATION:
      return getAnnotation();

    case PARAMETERS:
      return getParameters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CALL_ID:
      return isSetCallId();
    case PARENT_CALL_ID:
      return isSetParentCallId();
    case LEVEL:
      return isSetLevel();
    case START_TIMESTAMP:
      return isSetStartTimestamp();
    case END_TIMESTAMP:
      return isSetEndTimestamp();
    case DURATION:
      return isSetDuration();
    case SELF_DURATION:
      return isSetSelfDuration();
    case SIGNATURE:
      return isSetSignature();
    case FAILED:
      return isSetFailed();
    case EXTERNAL:
      return isSetExternal();
    case TAG:
      return isSetTag();
    case ENTRY_POINT:
      return isSetEntryPoint();
    case CROSS_APP_TOKEN:
      return isSetCrossAppToken();
    case CROSS_APP_CALL_ID:
      return isSetCrossAppCallId();
    case CROSS_APP_PARENT_CALL_ID:
      return isSetCrossAppParentCallId();
    case CROSS_APP_DURATION:
      return isSetCrossAppDuration();
    case CROSS_APP_SAMPLED:
      return isSetCrossAppSampled();
    case ANNOTATION:
      return isSetAnnotation();
    case PARAMETERS:
      return isSetParameters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TCall)
      return this.equals((TCall)that);
    return false;
  }

  public boolean equals(TCall that) {
    if (that == null)
      return false;

    boolean this_present_callId = true;
    boolean that_present_callId = true;
    if (this_present_callId || that_present_callId) {
      if (!(this_present_callId && that_present_callId))
        return false;
      if (this.callId != that.callId)
        return false;
    }

    boolean this_present_parentCallId = true;
    boolean that_present_parentCallId = true;
    if (this_present_parentCallId || that_present_parentCallId) {
      if (!(this_present_parentCallId && that_present_parentCallId))
        return false;
      if (this.parentCallId != that.parentCallId)
        return false;
    }

    boolean this_present_level = true;
    boolean that_present_level = true;
    if (this_present_level || that_present_level) {
      if (!(this_present_level && that_present_level))
        return false;
      if (this.level != that.level)
        return false;
    }

    boolean this_present_startTimestamp = true;
    boolean that_present_startTimestamp = true;
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_endTimestamp = true;
    boolean that_present_endTimestamp = true;
    if (this_present_endTimestamp || that_present_endTimestamp) {
      if (!(this_present_endTimestamp && that_present_endTimestamp))
        return false;
      if (this.endTimestamp != that.endTimestamp)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_selfDuration = true;
    boolean that_present_selfDuration = true;
    if (this_present_selfDuration || that_present_selfDuration) {
      if (!(this_present_selfDuration && that_present_selfDuration))
        return false;
      if (this.selfDuration != that.selfDuration)
        return false;
    }

    boolean this_present_signature = true && this.isSetSignature();
    boolean that_present_signature = true && that.isSetSignature();
    if (this_present_signature || that_present_signature) {
      if (!(this_present_signature && that_present_signature))
        return false;
      if (!this.signature.equals(that.signature))
        return false;
    }

    boolean this_present_failed = true && this.isSetFailed();
    boolean that_present_failed = true && that.isSetFailed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (this.failed != that.failed)
        return false;
    }

    boolean this_present_external = true && this.isSetExternal();
    boolean that_present_external = true && that.isSetExternal();
    if (this_present_external || that_present_external) {
      if (!(this_present_external && that_present_external))
        return false;
      if (this.external != that.external)
        return false;
    }

    boolean this_present_tag = true && this.isSetTag();
    boolean that_present_tag = true && that.isSetTag();
    if (this_present_tag || that_present_tag) {
      if (!(this_present_tag && that_present_tag))
        return false;
      if (!this.tag.equals(that.tag))
        return false;
    }

    boolean this_present_entryPoint = true;
    boolean that_present_entryPoint = true;
    if (this_present_entryPoint || that_present_entryPoint) {
      if (!(this_present_entryPoint && that_present_entryPoint))
        return false;
      if (this.entryPoint != that.entryPoint)
        return false;
    }

    boolean this_present_crossAppToken = true && this.isSetCrossAppToken();
    boolean that_present_crossAppToken = true && that.isSetCrossAppToken();
    if (this_present_crossAppToken || that_present_crossAppToken) {
      if (!(this_present_crossAppToken && that_present_crossAppToken))
        return false;
      if (!this.crossAppToken.equals(that.crossAppToken))
        return false;
    }

    boolean this_present_crossAppCallId = true && this.isSetCrossAppCallId();
    boolean that_present_crossAppCallId = true && that.isSetCrossAppCallId();
    if (this_present_crossAppCallId || that_present_crossAppCallId) {
      if (!(this_present_crossAppCallId && that_present_crossAppCallId))
        return false;
      if (this.crossAppCallId != that.crossAppCallId)
        return false;
    }

    boolean this_present_crossAppParentCallId = true && this.isSetCrossAppParentCallId();
    boolean that_present_crossAppParentCallId = true && that.isSetCrossAppParentCallId();
    if (this_present_crossAppParentCallId || that_present_crossAppParentCallId) {
      if (!(this_present_crossAppParentCallId && that_present_crossAppParentCallId))
        return false;
      if (this.crossAppParentCallId != that.crossAppParentCallId)
        return false;
    }

    boolean this_present_crossAppDuration = true && this.isSetCrossAppDuration();
    boolean that_present_crossAppDuration = true && that.isSetCrossAppDuration();
    if (this_present_crossAppDuration || that_present_crossAppDuration) {
      if (!(this_present_crossAppDuration && that_present_crossAppDuration))
        return false;
      if (this.crossAppDuration != that.crossAppDuration)
        return false;
    }

    boolean this_present_crossAppSampled = true && this.isSetCrossAppSampled();
    boolean that_present_crossAppSampled = true && that.isSetCrossAppSampled();
    if (this_present_crossAppSampled || that_present_crossAppSampled) {
      if (!(this_present_crossAppSampled && that_present_crossAppSampled))
        return false;
      if (this.crossAppSampled != that.crossAppSampled)
        return false;
    }

    boolean this_present_annotation = true && this.isSetAnnotation();
    boolean that_present_annotation = true && that.isSetAnnotation();
    if (this_present_annotation || that_present_annotation) {
      if (!(this_present_annotation && that_present_annotation))
        return false;
      if (!this.annotation.equals(that.annotation))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TCall other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TCall typedOther = (TCall)other;

    lastComparison = Boolean.valueOf(isSetCallId()).compareTo(typedOther.isSetCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callId, typedOther.callId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCallId()).compareTo(typedOther.isSetParentCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCallId, typedOther.parentCallId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLevel()).compareTo(typedOther.isSetLevel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLevel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.level, typedOther.level);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSelfDuration()).compareTo(typedOther.isSetSelfDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSelfDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.selfDuration, typedOther.selfDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSignature()).compareTo(typedOther.isSetSignature());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSignature()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.signature, typedOther.signature);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailed()).compareTo(typedOther.isSetFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, typedOther.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternal()).compareTo(typedOther.isSetExternal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.external, typedOther.external);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTag()).compareTo(typedOther.isSetTag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tag, typedOther.tag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryPoint()).compareTo(typedOther.isSetEntryPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPoint, typedOther.entryPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossAppToken()).compareTo(typedOther.isSetCrossAppToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossAppToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossAppToken, typedOther.crossAppToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossAppCallId()).compareTo(typedOther.isSetCrossAppCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossAppCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossAppCallId, typedOther.crossAppCallId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossAppParentCallId()).compareTo(typedOther.isSetCrossAppParentCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossAppParentCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossAppParentCallId, typedOther.crossAppParentCallId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossAppDuration()).compareTo(typedOther.isSetCrossAppDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossAppDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossAppDuration, typedOther.crossAppDuration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCrossAppSampled()).compareTo(typedOther.isSetCrossAppSampled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCrossAppSampled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.crossAppSampled, typedOther.crossAppSampled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAnnotation()).compareTo(typedOther.isSetAnnotation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnotation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.annotation, typedOther.annotation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, typedOther.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TCall(");
    boolean first = true;

    sb.append("callId:");
    sb.append(this.callId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCallId:");
    sb.append(this.parentCallId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("level:");
    sb.append(this.level);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTimestamp:");
    sb.append(this.startTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimestamp:");
    sb.append(this.endTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("selfDuration:");
    sb.append(this.selfDuration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("signature:");
    if (this.signature == null) {
      sb.append("null");
    } else {
      sb.append(this.signature);
    }
    first = false;
    if (isSetFailed()) {
      if (!first) sb.append(", ");
      sb.append("failed:");
      sb.append(this.failed);
      first = false;
    }
    if (isSetExternal()) {
      if (!first) sb.append(", ");
      sb.append("external:");
      sb.append(this.external);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("tag:");
    if (this.tag == null) {
      sb.append("null");
    } else {
      sb.append(this.tag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("entryPoint:");
    sb.append(this.entryPoint);
    first = false;
    if (isSetCrossAppToken()) {
      if (!first) sb.append(", ");
      sb.append("crossAppToken:");
      if (this.crossAppToken == null) {
        sb.append("null");
      } else {
        sb.append(this.crossAppToken);
      }
      first = false;
    }
    if (isSetCrossAppCallId()) {
      if (!first) sb.append(", ");
      sb.append("crossAppCallId:");
      sb.append(this.crossAppCallId);
      first = false;
    }
    if (isSetCrossAppParentCallId()) {
      if (!first) sb.append(", ");
      sb.append("crossAppParentCallId:");
      sb.append(this.crossAppParentCallId);
      first = false;
    }
    if (isSetCrossAppDuration()) {
      if (!first) sb.append(", ");
      sb.append("crossAppDuration:");
      sb.append(this.crossAppDuration);
      first = false;
    }
    if (isSetCrossAppSampled()) {
      if (!first) sb.append(", ");
      sb.append("crossAppSampled:");
      sb.append(this.crossAppSampled);
      first = false;
    }
    if (isSetAnnotation()) {
      if (!first) sb.append(", ");
      sb.append("annotation:");
      if (this.annotation == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.annotation, sb);
      }
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'callId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'parentCallId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'level' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTimestamp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTimestamp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'selfDuration' because it's a primitive and you chose the non-beans generator.
    if (signature == null) {
      throw new TProtocolException("Required field 'signature' was not present! Struct: " + toString());
    }
    if (tag == null) {
      throw new TProtocolException("Required field 'tag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'entryPoint' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TCallStandardSchemeFactory implements SchemeFactory {
    public TCallStandardScheme getScheme() {
      return new TCallStandardScheme();
    }
  }

  private static class TCallStandardScheme extends StandardScheme<TCall> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TCall struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callId = iprot.readI64();
              struct.setCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentCallId = iprot.readI64();
              struct.setParentCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LEVEL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.level = iprot.readI32();
              struct.setLevelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimestamp = iprot.readI64();
              struct.setEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SELF_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.selfDuration = iprot.readI64();
              struct.setSelfDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SIGNATURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.signature = iprot.readString();
              struct.setSignatureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.failed = iprot.readBool();
              struct.setFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXTERNAL
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.external = iprot.readBool();
              struct.setExternalIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // TAG
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.tag = TCallTag.findByValue(iprot.readI32());
              struct.setTagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // ENTRY_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.entryPoint = iprot.readBool();
              struct.setEntryPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // CROSS_APP_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.crossAppToken = iprot.readString();
              struct.setCrossAppTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // CROSS_APP_CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.crossAppCallId = iprot.readI64();
              struct.setCrossAppCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // CROSS_APP_PARENT_CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.crossAppParentCallId = iprot.readI64();
              struct.setCrossAppParentCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 25: // CROSS_APP_DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.crossAppDuration = iprot.readI64();
              struct.setCrossAppDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 27: // CROSS_APP_SAMPLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.crossAppSampled = iprot.readBool();
              struct.setCrossAppSampledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 28: // ANNOTATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.annotation = iprot.readBinary();
              struct.setAnnotationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 29: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map26 = iprot.readMapBegin();
                struct.parameters = new HashMap<String,String>(2*_map26.size);
                for (int _i27 = 0; _i27 < _map26.size; ++_i27)
                {
                  String _key28; // required
                  String _val29; // required
                  _key28 = iprot.readString();
                  _val29 = iprot.readString();
                  struct.parameters.put(_key28, _val29);
                }
                iprot.readMapEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCallId()) {
        throw new TProtocolException("Required field 'callId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentCallId()) {
        throw new TProtocolException("Required field 'parentCallId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLevel()) {
        throw new TProtocolException("Required field 'level' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTimestamp()) {
        throw new TProtocolException("Required field 'startTimestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTimestamp()) {
        throw new TProtocolException("Required field 'endTimestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDuration()) {
        throw new TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSelfDuration()) {
        throw new TProtocolException("Required field 'selfDuration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEntryPoint()) {
        throw new TProtocolException("Required field 'entryPoint' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TCall struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CALL_ID_FIELD_DESC);
      oprot.writeI64(struct.callId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_CALL_ID_FIELD_DESC);
      oprot.writeI64(struct.parentCallId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEVEL_FIELD_DESC);
      oprot.writeI32(struct.level);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.endTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SELF_DURATION_FIELD_DESC);
      oprot.writeI64(struct.selfDuration);
      oprot.writeFieldEnd();
      if (struct.signature != null) {
        oprot.writeFieldBegin(SIGNATURE_FIELD_DESC);
        oprot.writeString(struct.signature);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFailed()) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        oprot.writeBool(struct.failed);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExternal()) {
        oprot.writeFieldBegin(EXTERNAL_FIELD_DESC);
        oprot.writeBool(struct.external);
        oprot.writeFieldEnd();
      }
      if (struct.tag != null) {
        oprot.writeFieldBegin(TAG_FIELD_DESC);
        oprot.writeI32(struct.tag.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTRY_POINT_FIELD_DESC);
      oprot.writeBool(struct.entryPoint);
      oprot.writeFieldEnd();
      if (struct.crossAppToken != null) {
        if (struct.isSetCrossAppToken()) {
          oprot.writeFieldBegin(CROSS_APP_TOKEN_FIELD_DESC);
          oprot.writeString(struct.crossAppToken);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetCrossAppCallId()) {
        oprot.writeFieldBegin(CROSS_APP_CALL_ID_FIELD_DESC);
        oprot.writeI64(struct.crossAppCallId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCrossAppParentCallId()) {
        oprot.writeFieldBegin(CROSS_APP_PARENT_CALL_ID_FIELD_DESC);
        oprot.writeI64(struct.crossAppParentCallId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCrossAppDuration()) {
        oprot.writeFieldBegin(CROSS_APP_DURATION_FIELD_DESC);
        oprot.writeI64(struct.crossAppDuration);
        oprot.writeFieldEnd();
      }
      if (struct.isSetCrossAppSampled()) {
        oprot.writeFieldBegin(CROSS_APP_SAMPLED_FIELD_DESC);
        oprot.writeBool(struct.crossAppSampled);
        oprot.writeFieldEnd();
      }
      if (struct.annotation != null) {
        if (struct.isSetAnnotation()) {
          oprot.writeFieldBegin(ANNOTATION_FIELD_DESC);
          oprot.writeBinary(struct.annotation);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
            for (Map.Entry<String, String> _iter30 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter30.getKey());
              oprot.writeString(_iter30.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TCallTupleSchemeFactory implements SchemeFactory {
    public TCallTupleScheme getScheme() {
      return new TCallTupleScheme();
    }
  }

  private static class TCallTupleScheme extends TupleScheme<TCall> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TCall struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.callId);
      oprot.writeI64(struct.parentCallId);
      oprot.writeI32(struct.level);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeI64(struct.endTimestamp);
      oprot.writeI64(struct.duration);
      oprot.writeI64(struct.selfDuration);
      oprot.writeString(struct.signature);
      oprot.writeI32(struct.tag.getValue());
      oprot.writeBool(struct.entryPoint);
      BitSet optionals = new BitSet();
      if (struct.isSetFailed()) {
        optionals.set(0);
      }
      if (struct.isSetExternal()) {
        optionals.set(1);
      }
      if (struct.isSetCrossAppToken()) {
        optionals.set(2);
      }
      if (struct.isSetCrossAppCallId()) {
        optionals.set(3);
      }
      if (struct.isSetCrossAppParentCallId()) {
        optionals.set(4);
      }
      if (struct.isSetCrossAppDuration()) {
        optionals.set(5);
      }
      if (struct.isSetCrossAppSampled()) {
        optionals.set(6);
      }
      if (struct.isSetAnnotation()) {
        optionals.set(7);
      }
      if (struct.isSetParameters()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFailed()) {
        oprot.writeBool(struct.failed);
      }
      if (struct.isSetExternal()) {
        oprot.writeBool(struct.external);
      }
      if (struct.isSetCrossAppToken()) {
        oprot.writeString(struct.crossAppToken);
      }
      if (struct.isSetCrossAppCallId()) {
        oprot.writeI64(struct.crossAppCallId);
      }
      if (struct.isSetCrossAppParentCallId()) {
        oprot.writeI64(struct.crossAppParentCallId);
      }
      if (struct.isSetCrossAppDuration()) {
        oprot.writeI64(struct.crossAppDuration);
      }
      if (struct.isSetCrossAppSampled()) {
        oprot.writeBool(struct.crossAppSampled);
      }
      if (struct.isSetAnnotation()) {
        oprot.writeBinary(struct.annotation);
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.parameters.size());
          for (Map.Entry<String, String> _iter31 : struct.parameters.entrySet())
          {
            oprot.writeString(_iter31.getKey());
            oprot.writeString(_iter31.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TCall struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.callId = iprot.readI64();
      struct.setCallIdIsSet(true);
      struct.parentCallId = iprot.readI64();
      struct.setParentCallIdIsSet(true);
      struct.level = iprot.readI32();
      struct.setLevelIsSet(true);
      struct.startTimestamp = iprot.readI64();
      struct.setStartTimestampIsSet(true);
      struct.endTimestamp = iprot.readI64();
      struct.setEndTimestampIsSet(true);
      struct.duration = iprot.readI64();
      struct.setDurationIsSet(true);
      struct.selfDuration = iprot.readI64();
      struct.setSelfDurationIsSet(true);
      struct.signature = iprot.readString();
      struct.setSignatureIsSet(true);
      struct.tag = TCallTag.findByValue(iprot.readI32());
      struct.setTagIsSet(true);
      struct.entryPoint = iprot.readBool();
      struct.setEntryPointIsSet(true);
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.failed = iprot.readBool();
        struct.setFailedIsSet(true);
      }
      if (incoming.get(1)) {
        struct.external = iprot.readBool();
        struct.setExternalIsSet(true);
      }
      if (incoming.get(2)) {
        struct.crossAppToken = iprot.readString();
        struct.setCrossAppTokenIsSet(true);
      }
      if (incoming.get(3)) {
        struct.crossAppCallId = iprot.readI64();
        struct.setCrossAppCallIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.crossAppParentCallId = iprot.readI64();
        struct.setCrossAppParentCallIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.crossAppDuration = iprot.readI64();
        struct.setCrossAppDurationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.crossAppSampled = iprot.readBool();
        struct.setCrossAppSampledIsSet(true);
      }
      if (incoming.get(7)) {
        struct.annotation = iprot.readBinary();
        struct.setAnnotationIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map32 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameters = new HashMap<String,String>(2*_map32.size);
          for (int _i33 = 0; _i33 < _map32.size; ++_i33)
          {
            String _key34; // required
            String _val35; // required
            _key34 = iprot.readString();
            _val35 = iprot.readString();
            struct.parameters.put(_key34, _val35);
          }
        }
        struct.setParametersIsSet(true);
      }
    }
  }

}

