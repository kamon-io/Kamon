/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sematext.spm.client.tracing.thrift;

import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TTracingEvent implements org.apache.thrift.TBase<TTracingEvent, TTracingEvent._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TTracingEvent");

  private static final org.apache.thrift.protocol.TField EVENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("eventType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField PARTIAL_TRANSACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("partialTransaction", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TRACING_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("tracingError", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TTracingEventStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TTracingEventTupleSchemeFactory());
  }

  /**
   * 
   * @see TTracingEventType
   */
  public TTracingEventType eventType; // required
  public TPartialTransaction partialTransaction; // optional
  public TTracingError tracingError; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see TTracingEventType
     */
    EVENT_TYPE((short)1, "eventType"),
    PARTIAL_TRANSACTION((short)2, "partialTransaction"),
    TRACING_ERROR((short)3, "tracingError");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EVENT_TYPE
          return EVENT_TYPE;
        case 2: // PARTIAL_TRANSACTION
          return PARTIAL_TRANSACTION;
        case 3: // TRACING_ERROR
          return TRACING_ERROR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.PARTIAL_TRANSACTION, _Fields.TRACING_ERROR};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EVENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("eventType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTracingEventType.class)));
    tmpMap.put(_Fields.PARTIAL_TRANSACTION, new org.apache.thrift.meta_data.FieldMetaData("partialTransaction", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TPartialTransaction.class)));
    tmpMap.put(_Fields.TRACING_ERROR, new org.apache.thrift.meta_data.FieldMetaData("tracingError", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TTracingError.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TTracingEvent.class, metaDataMap);
  }

  public TTracingEvent() {
  }

  public TTracingEvent(
    TTracingEventType eventType)
  {
    this();
    this.eventType = eventType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TTracingEvent(TTracingEvent other) {
    if (other.isSetEventType()) {
      this.eventType = other.eventType;
    }
    if (other.isSetPartialTransaction()) {
      this.partialTransaction = new TPartialTransaction(other.partialTransaction);
    }
    if (other.isSetTracingError()) {
      this.tracingError = new TTracingError(other.tracingError);
    }
  }

  public TTracingEvent deepCopy() {
    return new TTracingEvent(this);
  }

  @Override
  public void clear() {
    this.eventType = null;
    this.partialTransaction = null;
    this.tracingError = null;
  }

  /**
   * 
   * @see TTracingEventType
   */
  public TTracingEventType getEventType() {
    return this.eventType;
  }

  /**
   * 
   * @see TTracingEventType
   */
  public TTracingEvent setEventType(TTracingEventType eventType) {
    this.eventType = eventType;
    return this;
  }

  public void unsetEventType() {
    this.eventType = null;
  }

  /** Returns true if field eventType is set (has been assigned a value) and false otherwise */
  public boolean isSetEventType() {
    return this.eventType != null;
  }

  public void setEventTypeIsSet(boolean value) {
    if (!value) {
      this.eventType = null;
    }
  }

  public TPartialTransaction getPartialTransaction() {
    return this.partialTransaction;
  }

  public TTracingEvent setPartialTransaction(TPartialTransaction partialTransaction) {
    this.partialTransaction = partialTransaction;
    return this;
  }

  public void unsetPartialTransaction() {
    this.partialTransaction = null;
  }

  /** Returns true if field partialTransaction is set (has been assigned a value) and false otherwise */
  public boolean isSetPartialTransaction() {
    return this.partialTransaction != null;
  }

  public void setPartialTransactionIsSet(boolean value) {
    if (!value) {
      this.partialTransaction = null;
    }
  }

  public TTracingError getTracingError() {
    return this.tracingError;
  }

  public TTracingEvent setTracingError(TTracingError tracingError) {
    this.tracingError = tracingError;
    return this;
  }

  public void unsetTracingError() {
    this.tracingError = null;
  }

  /** Returns true if field tracingError is set (has been assigned a value) and false otherwise */
  public boolean isSetTracingError() {
    return this.tracingError != null;
  }

  public void setTracingErrorIsSet(boolean value) {
    if (!value) {
      this.tracingError = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EVENT_TYPE:
      if (value == null) {
        unsetEventType();
      } else {
        setEventType((TTracingEventType)value);
      }
      break;

    case PARTIAL_TRANSACTION:
      if (value == null) {
        unsetPartialTransaction();
      } else {
        setPartialTransaction((TPartialTransaction)value);
      }
      break;

    case TRACING_ERROR:
      if (value == null) {
        unsetTracingError();
      } else {
        setTracingError((TTracingError)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EVENT_TYPE:
      return getEventType();

    case PARTIAL_TRANSACTION:
      return getPartialTransaction();

    case TRACING_ERROR:
      return getTracingError();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EVENT_TYPE:
      return isSetEventType();
    case PARTIAL_TRANSACTION:
      return isSetPartialTransaction();
    case TRACING_ERROR:
      return isSetTracingError();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TTracingEvent)
      return this.equals((TTracingEvent)that);
    return false;
  }

  public boolean equals(TTracingEvent that) {
    if (that == null)
      return false;

    boolean this_present_eventType = true && this.isSetEventType();
    boolean that_present_eventType = true && that.isSetEventType();
    if (this_present_eventType || that_present_eventType) {
      if (!(this_present_eventType && that_present_eventType))
        return false;
      if (!this.eventType.equals(that.eventType))
        return false;
    }

    boolean this_present_partialTransaction = true && this.isSetPartialTransaction();
    boolean that_present_partialTransaction = true && that.isSetPartialTransaction();
    if (this_present_partialTransaction || that_present_partialTransaction) {
      if (!(this_present_partialTransaction && that_present_partialTransaction))
        return false;
      if (!this.partialTransaction.equals(that.partialTransaction))
        return false;
    }

    boolean this_present_tracingError = true && this.isSetTracingError();
    boolean that_present_tracingError = true && that.isSetTracingError();
    if (this_present_tracingError || that_present_tracingError) {
      if (!(this_present_tracingError && that_present_tracingError))
        return false;
      if (!this.tracingError.equals(that.tracingError))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TTracingEvent other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TTracingEvent typedOther = (TTracingEvent)other;

    lastComparison = Boolean.valueOf(isSetEventType()).compareTo(typedOther.isSetEventType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEventType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.eventType, typedOther.eventType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartialTransaction()).compareTo(typedOther.isSetPartialTransaction());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartialTransaction()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partialTransaction, typedOther.partialTransaction);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTracingError()).compareTo(typedOther.isSetTracingError());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTracingError()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tracingError, typedOther.tracingError);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TTracingEvent(");
    boolean first = true;

    sb.append("eventType:");
    if (this.eventType == null) {
      sb.append("null");
    } else {
      sb.append(this.eventType);
    }
    first = false;
    if (isSetPartialTransaction()) {
      if (!first) sb.append(", ");
      sb.append("partialTransaction:");
      if (this.partialTransaction == null) {
        sb.append("null");
      } else {
        sb.append(this.partialTransaction);
      }
      first = false;
    }
    if (isSetTracingError()) {
      if (!first) sb.append(", ");
      sb.append("tracingError:");
      if (this.tracingError == null) {
        sb.append("null");
      } else {
        sb.append(this.tracingError);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    if (eventType == null) {
      throw new TProtocolException("Required field 'eventType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (partialTransaction != null) {
      partialTransaction.validate();
    }
    if (tracingError != null) {
      tracingError.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TTracingEventStandardSchemeFactory implements SchemeFactory {
    public TTracingEventStandardScheme getScheme() {
      return new TTracingEventStandardScheme();
    }
  }

  private static class TTracingEventStandardScheme extends StandardScheme<TTracingEvent> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TTracingEvent struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EVENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.eventType = TTracingEventType.findByValue(iprot.readI32());
              struct.setEventTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTIAL_TRANSACTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.partialTransaction = new TPartialTransaction();
              struct.partialTransaction.read(iprot);
              struct.setPartialTransactionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACING_ERROR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.tracingError = new TTracingError();
              struct.tracingError.read(iprot);
              struct.setTracingErrorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TTracingEvent struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.eventType != null) {
        oprot.writeFieldBegin(EVENT_TYPE_FIELD_DESC);
        oprot.writeI32(struct.eventType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.partialTransaction != null) {
        if (struct.isSetPartialTransaction()) {
          oprot.writeFieldBegin(PARTIAL_TRANSACTION_FIELD_DESC);
          struct.partialTransaction.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tracingError != null) {
        if (struct.isSetTracingError()) {
          oprot.writeFieldBegin(TRACING_ERROR_FIELD_DESC);
          struct.tracingError.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TTracingEventTupleSchemeFactory implements SchemeFactory {
    public TTracingEventTupleScheme getScheme() {
      return new TTracingEventTupleScheme();
    }
  }

  private static class TTracingEventTupleScheme extends TupleScheme<TTracingEvent> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TTracingEvent struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.eventType.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetPartialTransaction()) {
        optionals.set(0);
      }
      if (struct.isSetTracingError()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetPartialTransaction()) {
        struct.partialTransaction.write(oprot);
      }
      if (struct.isSetTracingError()) {
        struct.tracingError.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TTracingEvent struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.eventType = TTracingEventType.findByValue(iprot.readI32());
      struct.setEventTypeIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.partialTransaction = new TPartialTransaction();
        struct.partialTransaction.read(iprot);
        struct.setPartialTransactionIsSet(true);
      }
      if (incoming.get(1)) {
        struct.tracingError = new TTracingError();
        struct.tracingError.read(iprot);
        struct.setTracingErrorIsSet(true);
      }
    }
  }

}

