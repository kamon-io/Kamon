/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sematext.spm.client.tracing.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.nio.ByteBuffer;
import java.util.*;

/**
 * Partial Transaction. Idea is, that transaction itself can have multiple threads. Each traced thread is treated as PartialTransaction.
 * 
 * Note on generation callId/parentId/traceId - this triple should be unique across all transactions and generated on the client. Since it is tricky
 * give strong guarantees, secure random generator can be used.
 * 
 */
public class TPartialTransaction implements org.apache.thrift.TBase<TPartialTransaction, TPartialTransaction._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TPartialTransaction");

  private static final org.apache.thrift.protocol.TField CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("callId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARENT_CALL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentCallId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("traceId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField START_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("startTimestamp", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField END_TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("endTimestamp", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DURATION_FIELD_DESC = new org.apache.thrift.protocol.TField("duration", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField FAILED_FIELD_DESC = new org.apache.thrift.protocol.TField("failed", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField ENTRY_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("entryPoint", org.apache.thrift.protocol.TType.BOOL, (short)10);
  private static final org.apache.thrift.protocol.TField TRANSACTION_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionType", org.apache.thrift.protocol.TType.I32, (short)11);
  private static final org.apache.thrift.protocol.TField TRANSACTION_SUMMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("transactionSummary", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endpoint", org.apache.thrift.protocol.TType.STRUCT, (short)13);
  private static final org.apache.thrift.protocol.TField ASYNCHRONOUS_FIELD_DESC = new org.apache.thrift.protocol.TField("asynchronous", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField CALLS_FIELD_DESC = new org.apache.thrift.protocol.TField("calls", org.apache.thrift.protocol.TType.LIST, (short)15);
  private static final org.apache.thrift.protocol.TField FAILURE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("failureType", org.apache.thrift.protocol.TType.I32, (short)16);
  private static final org.apache.thrift.protocol.TField EXCEPTION_STACK_TRACE_FIELD_DESC = new org.apache.thrift.protocol.TField("exceptionStackTrace", org.apache.thrift.protocol.TType.STRING, (short)18);
  private static final org.apache.thrift.protocol.TField PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("parameters", org.apache.thrift.protocol.TType.MAP, (short)19);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TPartialTransactionStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TPartialTransactionTupleSchemeFactory());
  }

  public long callId; // required
  public long parentCallId; // required
  public long traceId; // required
  public String request; // optional
  public long startTimestamp; // required
  public long endTimestamp; // required
  public long duration; // required
  public String token; // required
  public boolean failed; // optional
  public boolean entryPoint; // required
  /**
   * 
   * @see TTransactionType
   */
  public TTransactionType transactionType; // required
  public ByteBuffer transactionSummary; // optional
  public TEndpoint endpoint; // optional
  public boolean asynchronous; // optional
  public List<TCall> calls; // required
  /**
   * 
   * @see TFailureType
   */
  public TFailureType failureType; // optional
  public ByteBuffer exceptionStackTrace; // optional
  public Map<String,String> parameters; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    CALL_ID((short)1, "callId"),
    PARENT_CALL_ID((short)2, "parentCallId"),
    TRACE_ID((short)3, "traceId"),
    REQUEST((short)4, "request"),
    START_TIMESTAMP((short)5, "startTimestamp"),
    END_TIMESTAMP((short)6, "endTimestamp"),
    DURATION((short)7, "duration"),
    TOKEN((short)8, "token"),
    FAILED((short)9, "failed"),
    ENTRY_POINT((short)10, "entryPoint"),
    /**
     * 
     * @see TTransactionType
     */
    TRANSACTION_TYPE((short)11, "transactionType"),
    TRANSACTION_SUMMARY((short)12, "transactionSummary"),
    ENDPOINT((short)13, "endpoint"),
    ASYNCHRONOUS((short)14, "asynchronous"),
    CALLS((short)15, "calls"),
    /**
     * 
     * @see TFailureType
     */
    FAILURE_TYPE((short)16, "failureType"),
    EXCEPTION_STACK_TRACE((short)18, "exceptionStackTrace"),
    PARAMETERS((short)19, "parameters");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CALL_ID
          return CALL_ID;
        case 2: // PARENT_CALL_ID
          return PARENT_CALL_ID;
        case 3: // TRACE_ID
          return TRACE_ID;
        case 4: // REQUEST
          return REQUEST;
        case 5: // START_TIMESTAMP
          return START_TIMESTAMP;
        case 6: // END_TIMESTAMP
          return END_TIMESTAMP;
        case 7: // DURATION
          return DURATION;
        case 8: // TOKEN
          return TOKEN;
        case 9: // FAILED
          return FAILED;
        case 10: // ENTRY_POINT
          return ENTRY_POINT;
        case 11: // TRANSACTION_TYPE
          return TRANSACTION_TYPE;
        case 12: // TRANSACTION_SUMMARY
          return TRANSACTION_SUMMARY;
        case 13: // ENDPOINT
          return ENDPOINT;
        case 14: // ASYNCHRONOUS
          return ASYNCHRONOUS;
        case 15: // CALLS
          return CALLS;
        case 16: // FAILURE_TYPE
          return FAILURE_TYPE;
        case 18: // EXCEPTION_STACK_TRACE
          return EXCEPTION_STACK_TRACE;
        case 19: // PARAMETERS
          return PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CALLID_ISSET_ID = 0;
  private static final int __PARENTCALLID_ISSET_ID = 1;
  private static final int __TRACEID_ISSET_ID = 2;
  private static final int __STARTTIMESTAMP_ISSET_ID = 3;
  private static final int __ENDTIMESTAMP_ISSET_ID = 4;
  private static final int __DURATION_ISSET_ID = 5;
  private static final int __FAILED_ISSET_ID = 6;
  private static final int __ENTRYPOINT_ISSET_ID = 7;
  private static final int __ASYNCHRONOUS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.REQUEST, _Fields.FAILED, _Fields.TRANSACTION_SUMMARY, _Fields.ENDPOINT, _Fields.ASYNCHRONOUS, _Fields.FAILURE_TYPE, _Fields.EXCEPTION_STACK_TRACE, _Fields.PARAMETERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("callId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_CALL_ID, new org.apache.thrift.meta_data.FieldMetaData("parentCallId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("traceId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.START_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("startTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("endTimestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DURATION, new org.apache.thrift.meta_data.FieldMetaData("duration", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FAILED, new org.apache.thrift.meta_data.FieldMetaData("failed", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.ENTRY_POINT, new org.apache.thrift.meta_data.FieldMetaData("entryPoint", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.TRANSACTION_TYPE, new org.apache.thrift.meta_data.FieldMetaData("transactionType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TTransactionType.class)));
    tmpMap.put(_Fields.TRANSACTION_SUMMARY, new org.apache.thrift.meta_data.FieldMetaData("transactionSummary", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("endpoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEndpoint.class)));
    tmpMap.put(_Fields.ASYNCHRONOUS, new org.apache.thrift.meta_data.FieldMetaData("asynchronous", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CALLS, new org.apache.thrift.meta_data.FieldMetaData("calls", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCall.class))));
    tmpMap.put(_Fields.FAILURE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("failureType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TFailureType.class)));
    tmpMap.put(_Fields.EXCEPTION_STACK_TRACE, new org.apache.thrift.meta_data.FieldMetaData("exceptionStackTrace", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("parameters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TPartialTransaction.class, metaDataMap);
  }

  public TPartialTransaction() {
    this.transactionType = com.sematext.spm.client.tracing.thrift.TTransactionType.WEB;

  }

  public TPartialTransaction(
    long callId,
    long parentCallId,
    long traceId,
    long startTimestamp,
    long endTimestamp,
    long duration,
    String token,
    boolean entryPoint,
    TTransactionType transactionType,
    List<TCall> calls)
  {
    this();
    this.callId = callId;
    setCallIdIsSet(true);
    this.parentCallId = parentCallId;
    setParentCallIdIsSet(true);
    this.traceId = traceId;
    setTraceIdIsSet(true);
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    this.endTimestamp = endTimestamp;
    setEndTimestampIsSet(true);
    this.duration = duration;
    setDurationIsSet(true);
    this.token = token;
    this.entryPoint = entryPoint;
    setEntryPointIsSet(true);
    this.transactionType = transactionType;
    this.calls = calls;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TPartialTransaction(TPartialTransaction other) {
    __isset_bitfield = other.__isset_bitfield;
    this.callId = other.callId;
    this.parentCallId = other.parentCallId;
    this.traceId = other.traceId;
    if (other.isSetRequest()) {
      this.request = other.request;
    }
    this.startTimestamp = other.startTimestamp;
    this.endTimestamp = other.endTimestamp;
    this.duration = other.duration;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.failed = other.failed;
    this.entryPoint = other.entryPoint;
    if (other.isSetTransactionType()) {
      this.transactionType = other.transactionType;
    }
    if (other.isSetTransactionSummary()) {
      this.transactionSummary = org.apache.thrift.TBaseHelper.copyBinary(other.transactionSummary);
;
    }
    if (other.isSetEndpoint()) {
      this.endpoint = new TEndpoint(other.endpoint);
    }
    this.asynchronous = other.asynchronous;
    if (other.isSetCalls()) {
      List<TCall> __this__calls = new ArrayList<TCall>();
      for (TCall other_element : other.calls) {
        __this__calls.add(new TCall(other_element));
      }
      this.calls = __this__calls;
    }
    if (other.isSetFailureType()) {
      this.failureType = other.failureType;
    }
    if (other.isSetExceptionStackTrace()) {
      this.exceptionStackTrace = org.apache.thrift.TBaseHelper.copyBinary(other.exceptionStackTrace);
;
    }
    if (other.isSetParameters()) {
      Map<String,String> __this__parameters = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.parameters.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__parameters_copy_key = other_element_key;

        String __this__parameters_copy_value = other_element_value;

        __this__parameters.put(__this__parameters_copy_key, __this__parameters_copy_value);
      }
      this.parameters = __this__parameters;
    }
  }

  public TPartialTransaction deepCopy() {
    return new TPartialTransaction(this);
  }

  @Override
  public void clear() {
    setCallIdIsSet(false);
    this.callId = 0;
    setParentCallIdIsSet(false);
    this.parentCallId = 0;
    setTraceIdIsSet(false);
    this.traceId = 0;
    this.request = null;
    setStartTimestampIsSet(false);
    this.startTimestamp = 0;
    setEndTimestampIsSet(false);
    this.endTimestamp = 0;
    setDurationIsSet(false);
    this.duration = 0;
    this.token = null;
    setFailedIsSet(false);
    this.failed = false;
    setEntryPointIsSet(false);
    this.entryPoint = false;
    this.transactionType = com.sematext.spm.client.tracing.thrift.TTransactionType.WEB;

    this.transactionSummary = null;
    this.endpoint = null;
    setAsynchronousIsSet(false);
    this.asynchronous = false;
    this.calls = null;
    this.failureType = null;
    this.exceptionStackTrace = null;
    this.parameters = null;
  }

  public long getCallId() {
    return this.callId;
  }

  public TPartialTransaction setCallId(long callId) {
    this.callId = callId;
    setCallIdIsSet(true);
    return this;
  }

  public void unsetCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CALLID_ISSET_ID);
  }

  /** Returns true if field callId is set (has been assigned a value) and false otherwise */
  public boolean isSetCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __CALLID_ISSET_ID);
  }

  public void setCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CALLID_ISSET_ID, value);
  }

  public long getParentCallId() {
    return this.parentCallId;
  }

  public TPartialTransaction setParentCallId(long parentCallId) {
    this.parentCallId = parentCallId;
    setParentCallIdIsSet(true);
    return this;
  }

  public void unsetParentCallId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENTCALLID_ISSET_ID);
  }

  /** Returns true if field parentCallId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentCallId() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENTCALLID_ISSET_ID);
  }

  public void setParentCallIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENTCALLID_ISSET_ID, value);
  }

  public long getTraceId() {
    return this.traceId;
  }

  public TPartialTransaction setTraceId(long traceId) {
    this.traceId = traceId;
    setTraceIdIsSet(true);
    return this;
  }

  public void unsetTraceId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  /** Returns true if field traceId is set (has been assigned a value) and false otherwise */
  public boolean isSetTraceId() {
    return EncodingUtils.testBit(__isset_bitfield, __TRACEID_ISSET_ID);
  }

  public void setTraceIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TRACEID_ISSET_ID, value);
  }

  public String getRequest() {
    return this.request;
  }

  public TPartialTransaction setRequest(String request) {
    this.request = request;
    return this;
  }

  public void unsetRequest() {
    this.request = null;
  }

  /** Returns true if field request is set (has been assigned a value) and false otherwise */
  public boolean isSetRequest() {
    return this.request != null;
  }

  public void setRequestIsSet(boolean value) {
    if (!value) {
      this.request = null;
    }
  }

  public long getStartTimestamp() {
    return this.startTimestamp;
  }

  public TPartialTransaction setStartTimestamp(long startTimestamp) {
    this.startTimestamp = startTimestamp;
    setStartTimestampIsSet(true);
    return this;
  }

  public void unsetStartTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field startTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID);
  }

  public void setStartTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIMESTAMP_ISSET_ID, value);
  }

  public long getEndTimestamp() {
    return this.endTimestamp;
  }

  public TPartialTransaction setEndTimestamp(long endTimestamp) {
    this.endTimestamp = endTimestamp;
    setEndTimestampIsSet(true);
    return this;
  }

  public void unsetEndTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  /** Returns true if field endTimestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID);
  }

  public void setEndTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIMESTAMP_ISSET_ID, value);
  }

  public long getDuration() {
    return this.duration;
  }

  public TPartialTransaction setDuration(long duration) {
    this.duration = duration;
    setDurationIsSet(true);
    return this;
  }

  public void unsetDuration() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  /** Returns true if field duration is set (has been assigned a value) and false otherwise */
  public boolean isSetDuration() {
    return EncodingUtils.testBit(__isset_bitfield, __DURATION_ISSET_ID);
  }

  public void setDurationIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DURATION_ISSET_ID, value);
  }

  public String getToken() {
    return this.token;
  }

  public TPartialTransaction setToken(String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public boolean isFailed() {
    return this.failed;
  }

  public TPartialTransaction setFailed(boolean failed) {
    this.failed = failed;
    setFailedIsSet(true);
    return this;
  }

  public void unsetFailed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILED_ISSET_ID);
  }

  /** Returns true if field failed is set (has been assigned a value) and false otherwise */
  public boolean isSetFailed() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILED_ISSET_ID);
  }

  public void setFailedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILED_ISSET_ID, value);
  }

  public boolean isEntryPoint() {
    return this.entryPoint;
  }

  public TPartialTransaction setEntryPoint(boolean entryPoint) {
    this.entryPoint = entryPoint;
    setEntryPointIsSet(true);
    return this;
  }

  public void unsetEntryPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID);
  }

  /** Returns true if field entryPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEntryPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID);
  }

  public void setEntryPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRYPOINT_ISSET_ID, value);
  }

  /**
   * 
   * @see TTransactionType
   */
  public TTransactionType getTransactionType() {
    return this.transactionType;
  }

  /**
   * 
   * @see TTransactionType
   */
  public TPartialTransaction setTransactionType(TTransactionType transactionType) {
    this.transactionType = transactionType;
    return this;
  }

  public void unsetTransactionType() {
    this.transactionType = null;
  }

  /** Returns true if field transactionType is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionType() {
    return this.transactionType != null;
  }

  public void setTransactionTypeIsSet(boolean value) {
    if (!value) {
      this.transactionType = null;
    }
  }

  public byte[] getTransactionSummary() {
    setTransactionSummary(org.apache.thrift.TBaseHelper.rightSize(transactionSummary));
    return transactionSummary == null ? null : transactionSummary.array();
  }

  public ByteBuffer bufferForTransactionSummary() {
    return transactionSummary;
  }

  public TPartialTransaction setTransactionSummary(byte[] transactionSummary) {
    setTransactionSummary(transactionSummary == null ? (ByteBuffer)null : ByteBuffer.wrap(transactionSummary));
    return this;
  }

  public TPartialTransaction setTransactionSummary(ByteBuffer transactionSummary) {
    this.transactionSummary = transactionSummary;
    return this;
  }

  public void unsetTransactionSummary() {
    this.transactionSummary = null;
  }

  /** Returns true if field transactionSummary is set (has been assigned a value) and false otherwise */
  public boolean isSetTransactionSummary() {
    return this.transactionSummary != null;
  }

  public void setTransactionSummaryIsSet(boolean value) {
    if (!value) {
      this.transactionSummary = null;
    }
  }

  public TEndpoint getEndpoint() {
    return this.endpoint;
  }

  public TPartialTransaction setEndpoint(TEndpoint endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  public void unsetEndpoint() {
    this.endpoint = null;
  }

  /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpoint() {
    return this.endpoint != null;
  }

  public void setEndpointIsSet(boolean value) {
    if (!value) {
      this.endpoint = null;
    }
  }

  public boolean isAsynchronous() {
    return this.asynchronous;
  }

  public TPartialTransaction setAsynchronous(boolean asynchronous) {
    this.asynchronous = asynchronous;
    setAsynchronousIsSet(true);
    return this;
  }

  public void unsetAsynchronous() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ASYNCHRONOUS_ISSET_ID);
  }

  /** Returns true if field asynchronous is set (has been assigned a value) and false otherwise */
  public boolean isSetAsynchronous() {
    return EncodingUtils.testBit(__isset_bitfield, __ASYNCHRONOUS_ISSET_ID);
  }

  public void setAsynchronousIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ASYNCHRONOUS_ISSET_ID, value);
  }

  public int getCallsSize() {
    return (this.calls == null) ? 0 : this.calls.size();
  }

  public java.util.Iterator<TCall> getCallsIterator() {
    return (this.calls == null) ? null : this.calls.iterator();
  }

  public void addToCalls(TCall elem) {
    if (this.calls == null) {
      this.calls = new ArrayList<TCall>();
    }
    this.calls.add(elem);
  }

  public List<TCall> getCalls() {
    return this.calls;
  }

  public TPartialTransaction setCalls(List<TCall> calls) {
    this.calls = calls;
    return this;
  }

  public void unsetCalls() {
    this.calls = null;
  }

  /** Returns true if field calls is set (has been assigned a value) and false otherwise */
  public boolean isSetCalls() {
    return this.calls != null;
  }

  public void setCallsIsSet(boolean value) {
    if (!value) {
      this.calls = null;
    }
  }

  /**
   * 
   * @see TFailureType
   */
  public TFailureType getFailureType() {
    return this.failureType;
  }

  /**
   * 
   * @see TFailureType
   */
  public TPartialTransaction setFailureType(TFailureType failureType) {
    this.failureType = failureType;
    return this;
  }

  public void unsetFailureType() {
    this.failureType = null;
  }

  /** Returns true if field failureType is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureType() {
    return this.failureType != null;
  }

  public void setFailureTypeIsSet(boolean value) {
    if (!value) {
      this.failureType = null;
    }
  }

  public byte[] getExceptionStackTrace() {
    setExceptionStackTrace(org.apache.thrift.TBaseHelper.rightSize(exceptionStackTrace));
    return exceptionStackTrace == null ? null : exceptionStackTrace.array();
  }

  public ByteBuffer bufferForExceptionStackTrace() {
    return exceptionStackTrace;
  }

  public TPartialTransaction setExceptionStackTrace(byte[] exceptionStackTrace) {
    setExceptionStackTrace(exceptionStackTrace == null ? (ByteBuffer)null : ByteBuffer.wrap(exceptionStackTrace));
    return this;
  }

  public TPartialTransaction setExceptionStackTrace(ByteBuffer exceptionStackTrace) {
    this.exceptionStackTrace = exceptionStackTrace;
    return this;
  }

  public void unsetExceptionStackTrace() {
    this.exceptionStackTrace = null;
  }

  /** Returns true if field exceptionStackTrace is set (has been assigned a value) and false otherwise */
  public boolean isSetExceptionStackTrace() {
    return this.exceptionStackTrace != null;
  }

  public void setExceptionStackTraceIsSet(boolean value) {
    if (!value) {
      this.exceptionStackTrace = null;
    }
  }

  public int getParametersSize() {
    return (this.parameters == null) ? 0 : this.parameters.size();
  }

  public void putToParameters(String key, String val) {
    if (this.parameters == null) {
      this.parameters = new HashMap<String,String>();
    }
    this.parameters.put(key, val);
  }

  public Map<String,String> getParameters() {
    return this.parameters;
  }

  public TPartialTransaction setParameters(Map<String,String> parameters) {
    this.parameters = parameters;
    return this;
  }

  public void unsetParameters() {
    this.parameters = null;
  }

  /** Returns true if field parameters is set (has been assigned a value) and false otherwise */
  public boolean isSetParameters() {
    return this.parameters != null;
  }

  public void setParametersIsSet(boolean value) {
    if (!value) {
      this.parameters = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case CALL_ID:
      if (value == null) {
        unsetCallId();
      } else {
        setCallId((Long)value);
      }
      break;

    case PARENT_CALL_ID:
      if (value == null) {
        unsetParentCallId();
      } else {
        setParentCallId((Long)value);
      }
      break;

    case TRACE_ID:
      if (value == null) {
        unsetTraceId();
      } else {
        setTraceId((Long)value);
      }
      break;

    case REQUEST:
      if (value == null) {
        unsetRequest();
      } else {
        setRequest((String)value);
      }
      break;

    case START_TIMESTAMP:
      if (value == null) {
        unsetStartTimestamp();
      } else {
        setStartTimestamp((Long)value);
      }
      break;

    case END_TIMESTAMP:
      if (value == null) {
        unsetEndTimestamp();
      } else {
        setEndTimestamp((Long)value);
      }
      break;

    case DURATION:
      if (value == null) {
        unsetDuration();
      } else {
        setDuration((Long)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((String)value);
      }
      break;

    case FAILED:
      if (value == null) {
        unsetFailed();
      } else {
        setFailed((Boolean)value);
      }
      break;

    case ENTRY_POINT:
      if (value == null) {
        unsetEntryPoint();
      } else {
        setEntryPoint((Boolean)value);
      }
      break;

    case TRANSACTION_TYPE:
      if (value == null) {
        unsetTransactionType();
      } else {
        setTransactionType((TTransactionType)value);
      }
      break;

    case TRANSACTION_SUMMARY:
      if (value == null) {
        unsetTransactionSummary();
      } else {
        setTransactionSummary((ByteBuffer)value);
      }
      break;

    case ENDPOINT:
      if (value == null) {
        unsetEndpoint();
      } else {
        setEndpoint((TEndpoint)value);
      }
      break;

    case ASYNCHRONOUS:
      if (value == null) {
        unsetAsynchronous();
      } else {
        setAsynchronous((Boolean)value);
      }
      break;

    case CALLS:
      if (value == null) {
        unsetCalls();
      } else {
        setCalls((List<TCall>)value);
      }
      break;

    case FAILURE_TYPE:
      if (value == null) {
        unsetFailureType();
      } else {
        setFailureType((TFailureType)value);
      }
      break;

    case EXCEPTION_STACK_TRACE:
      if (value == null) {
        unsetExceptionStackTrace();
      } else {
        setExceptionStackTrace((ByteBuffer)value);
      }
      break;

    case PARAMETERS:
      if (value == null) {
        unsetParameters();
      } else {
        setParameters((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case CALL_ID:
      return Long.valueOf(getCallId());

    case PARENT_CALL_ID:
      return Long.valueOf(getParentCallId());

    case TRACE_ID:
      return Long.valueOf(getTraceId());

    case REQUEST:
      return getRequest();

    case START_TIMESTAMP:
      return Long.valueOf(getStartTimestamp());

    case END_TIMESTAMP:
      return Long.valueOf(getEndTimestamp());

    case DURATION:
      return Long.valueOf(getDuration());

    case TOKEN:
      return getToken();

    case FAILED:
      return Boolean.valueOf(isFailed());

    case ENTRY_POINT:
      return Boolean.valueOf(isEntryPoint());

    case TRANSACTION_TYPE:
      return getTransactionType();

    case TRANSACTION_SUMMARY:
      return getTransactionSummary();

    case ENDPOINT:
      return getEndpoint();

    case ASYNCHRONOUS:
      return Boolean.valueOf(isAsynchronous());

    case CALLS:
      return getCalls();

    case FAILURE_TYPE:
      return getFailureType();

    case EXCEPTION_STACK_TRACE:
      return getExceptionStackTrace();

    case PARAMETERS:
      return getParameters();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case CALL_ID:
      return isSetCallId();
    case PARENT_CALL_ID:
      return isSetParentCallId();
    case TRACE_ID:
      return isSetTraceId();
    case REQUEST:
      return isSetRequest();
    case START_TIMESTAMP:
      return isSetStartTimestamp();
    case END_TIMESTAMP:
      return isSetEndTimestamp();
    case DURATION:
      return isSetDuration();
    case TOKEN:
      return isSetToken();
    case FAILED:
      return isSetFailed();
    case ENTRY_POINT:
      return isSetEntryPoint();
    case TRANSACTION_TYPE:
      return isSetTransactionType();
    case TRANSACTION_SUMMARY:
      return isSetTransactionSummary();
    case ENDPOINT:
      return isSetEndpoint();
    case ASYNCHRONOUS:
      return isSetAsynchronous();
    case CALLS:
      return isSetCalls();
    case FAILURE_TYPE:
      return isSetFailureType();
    case EXCEPTION_STACK_TRACE:
      return isSetExceptionStackTrace();
    case PARAMETERS:
      return isSetParameters();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TPartialTransaction)
      return this.equals((TPartialTransaction)that);
    return false;
  }

  public boolean equals(TPartialTransaction that) {
    if (that == null)
      return false;

    boolean this_present_callId = true;
    boolean that_present_callId = true;
    if (this_present_callId || that_present_callId) {
      if (!(this_present_callId && that_present_callId))
        return false;
      if (this.callId != that.callId)
        return false;
    }

    boolean this_present_parentCallId = true;
    boolean that_present_parentCallId = true;
    if (this_present_parentCallId || that_present_parentCallId) {
      if (!(this_present_parentCallId && that_present_parentCallId))
        return false;
      if (this.parentCallId != that.parentCallId)
        return false;
    }

    boolean this_present_traceId = true;
    boolean that_present_traceId = true;
    if (this_present_traceId || that_present_traceId) {
      if (!(this_present_traceId && that_present_traceId))
        return false;
      if (this.traceId != that.traceId)
        return false;
    }

    boolean this_present_request = true && this.isSetRequest();
    boolean that_present_request = true && that.isSetRequest();
    if (this_present_request || that_present_request) {
      if (!(this_present_request && that_present_request))
        return false;
      if (!this.request.equals(that.request))
        return false;
    }

    boolean this_present_startTimestamp = true;
    boolean that_present_startTimestamp = true;
    if (this_present_startTimestamp || that_present_startTimestamp) {
      if (!(this_present_startTimestamp && that_present_startTimestamp))
        return false;
      if (this.startTimestamp != that.startTimestamp)
        return false;
    }

    boolean this_present_endTimestamp = true;
    boolean that_present_endTimestamp = true;
    if (this_present_endTimestamp || that_present_endTimestamp) {
      if (!(this_present_endTimestamp && that_present_endTimestamp))
        return false;
      if (this.endTimestamp != that.endTimestamp)
        return false;
    }

    boolean this_present_duration = true;
    boolean that_present_duration = true;
    if (this_present_duration || that_present_duration) {
      if (!(this_present_duration && that_present_duration))
        return false;
      if (this.duration != that.duration)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_failed = true && this.isSetFailed();
    boolean that_present_failed = true && that.isSetFailed();
    if (this_present_failed || that_present_failed) {
      if (!(this_present_failed && that_present_failed))
        return false;
      if (this.failed != that.failed)
        return false;
    }

    boolean this_present_entryPoint = true;
    boolean that_present_entryPoint = true;
    if (this_present_entryPoint || that_present_entryPoint) {
      if (!(this_present_entryPoint && that_present_entryPoint))
        return false;
      if (this.entryPoint != that.entryPoint)
        return false;
    }

    boolean this_present_transactionType = true && this.isSetTransactionType();
    boolean that_present_transactionType = true && that.isSetTransactionType();
    if (this_present_transactionType || that_present_transactionType) {
      if (!(this_present_transactionType && that_present_transactionType))
        return false;
      if (!this.transactionType.equals(that.transactionType))
        return false;
    }

    boolean this_present_transactionSummary = true && this.isSetTransactionSummary();
    boolean that_present_transactionSummary = true && that.isSetTransactionSummary();
    if (this_present_transactionSummary || that_present_transactionSummary) {
      if (!(this_present_transactionSummary && that_present_transactionSummary))
        return false;
      if (!this.transactionSummary.equals(that.transactionSummary))
        return false;
    }

    boolean this_present_endpoint = true && this.isSetEndpoint();
    boolean that_present_endpoint = true && that.isSetEndpoint();
    if (this_present_endpoint || that_present_endpoint) {
      if (!(this_present_endpoint && that_present_endpoint))
        return false;
      if (!this.endpoint.equals(that.endpoint))
        return false;
    }

    boolean this_present_asynchronous = true && this.isSetAsynchronous();
    boolean that_present_asynchronous = true && that.isSetAsynchronous();
    if (this_present_asynchronous || that_present_asynchronous) {
      if (!(this_present_asynchronous && that_present_asynchronous))
        return false;
      if (this.asynchronous != that.asynchronous)
        return false;
    }

    boolean this_present_calls = true && this.isSetCalls();
    boolean that_present_calls = true && that.isSetCalls();
    if (this_present_calls || that_present_calls) {
      if (!(this_present_calls && that_present_calls))
        return false;
      if (!this.calls.equals(that.calls))
        return false;
    }

    boolean this_present_failureType = true && this.isSetFailureType();
    boolean that_present_failureType = true && that.isSetFailureType();
    if (this_present_failureType || that_present_failureType) {
      if (!(this_present_failureType && that_present_failureType))
        return false;
      if (!this.failureType.equals(that.failureType))
        return false;
    }

    boolean this_present_exceptionStackTrace = true && this.isSetExceptionStackTrace();
    boolean that_present_exceptionStackTrace = true && that.isSetExceptionStackTrace();
    if (this_present_exceptionStackTrace || that_present_exceptionStackTrace) {
      if (!(this_present_exceptionStackTrace && that_present_exceptionStackTrace))
        return false;
      if (!this.exceptionStackTrace.equals(that.exceptionStackTrace))
        return false;
    }

    boolean this_present_parameters = true && this.isSetParameters();
    boolean that_present_parameters = true && that.isSetParameters();
    if (this_present_parameters || that_present_parameters) {
      if (!(this_present_parameters && that_present_parameters))
        return false;
      if (!this.parameters.equals(that.parameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TPartialTransaction other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TPartialTransaction typedOther = (TPartialTransaction)other;

    lastComparison = Boolean.valueOf(isSetCallId()).compareTo(typedOther.isSetCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.callId, typedOther.callId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParentCallId()).compareTo(typedOther.isSetParentCallId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentCallId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentCallId, typedOther.parentCallId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTraceId()).compareTo(typedOther.isSetTraceId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTraceId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.traceId, typedOther.traceId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequest()).compareTo(typedOther.isSetRequest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, typedOther.request);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTimestamp()).compareTo(typedOther.isSetStartTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTimestamp, typedOther.startTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTimestamp()).compareTo(typedOther.isSetEndTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTimestamp, typedOther.endTimestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDuration()).compareTo(typedOther.isSetDuration());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDuration()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.duration, typedOther.duration);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetToken()).compareTo(typedOther.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, typedOther.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailed()).compareTo(typedOther.isSetFailed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failed, typedOther.failed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEntryPoint()).compareTo(typedOther.isSetEntryPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEntryPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryPoint, typedOther.entryPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionType()).compareTo(typedOther.isSetTransactionType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionType, typedOther.transactionType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransactionSummary()).compareTo(typedOther.isSetTransactionSummary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransactionSummary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transactionSummary, typedOther.transactionSummary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndpoint()).compareTo(typedOther.isSetEndpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpoint, typedOther.endpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAsynchronous()).compareTo(typedOther.isSetAsynchronous());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAsynchronous()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.asynchronous, typedOther.asynchronous);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCalls()).compareTo(typedOther.isSetCalls());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCalls()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.calls, typedOther.calls);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureType()).compareTo(typedOther.isSetFailureType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureType, typedOther.failureType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExceptionStackTrace()).compareTo(typedOther.isSetExceptionStackTrace());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExceptionStackTrace()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exceptionStackTrace, typedOther.exceptionStackTrace);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParameters()).compareTo(typedOther.isSetParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameters, typedOther.parameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TPartialTransaction(");
    boolean first = true;

    sb.append("callId:");
    sb.append(this.callId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentCallId:");
    sb.append(this.parentCallId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("traceId:");
    sb.append(this.traceId);
    first = false;
    if (isSetRequest()) {
      if (!first) sb.append(", ");
      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("startTimestamp:");
    sb.append(this.startTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTimestamp:");
    sb.append(this.endTimestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("duration:");
    sb.append(this.duration);
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (isSetFailed()) {
      if (!first) sb.append(", ");
      sb.append("failed:");
      sb.append(this.failed);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("entryPoint:");
    sb.append(this.entryPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("transactionType:");
    if (this.transactionType == null) {
      sb.append("null");
    } else {
      sb.append(this.transactionType);
    }
    first = false;
    if (isSetTransactionSummary()) {
      if (!first) sb.append(", ");
      sb.append("transactionSummary:");
      if (this.transactionSummary == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.transactionSummary, sb);
      }
      first = false;
    }
    if (isSetEndpoint()) {
      if (!first) sb.append(", ");
      sb.append("endpoint:");
      if (this.endpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endpoint);
      }
      first = false;
    }
    if (isSetAsynchronous()) {
      if (!first) sb.append(", ");
      sb.append("asynchronous:");
      sb.append(this.asynchronous);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("calls:");
    if (this.calls == null) {
      sb.append("null");
    } else {
      sb.append(this.calls);
    }
    first = false;
    if (isSetFailureType()) {
      if (!first) sb.append(", ");
      sb.append("failureType:");
      if (this.failureType == null) {
        sb.append("null");
      } else {
        sb.append(this.failureType);
      }
      first = false;
    }
    if (isSetExceptionStackTrace()) {
      if (!first) sb.append(", ");
      sb.append("exceptionStackTrace:");
      if (this.exceptionStackTrace == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.exceptionStackTrace, sb);
      }
      first = false;
    }
    if (isSetParameters()) {
      if (!first) sb.append(", ");
      sb.append("parameters:");
      if (this.parameters == null) {
        sb.append("null");
      } else {
        sb.append(this.parameters);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'callId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'parentCallId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'traceId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'startTimestamp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'endTimestamp' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'duration' because it's a primitive and you chose the non-beans generator.
    if (token == null) {
      throw new TProtocolException("Required field 'token' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'entryPoint' because it's a primitive and you chose the non-beans generator.
    if (transactionType == null) {
      throw new TProtocolException("Required field 'transactionType' was not present! Struct: " + toString());
    }
    if (calls == null) {
      throw new TProtocolException("Required field 'calls' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (endpoint != null) {
      endpoint.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TPartialTransactionStandardSchemeFactory implements SchemeFactory {
    public TPartialTransactionStandardScheme getScheme() {
      return new TPartialTransactionStandardScheme();
    }
  }

  private static class TPartialTransactionStandardScheme extends StandardScheme<TPartialTransaction> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TPartialTransaction struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.callId = iprot.readI64();
              struct.setCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARENT_CALL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parentCallId = iprot.readI64();
              struct.setParentCallIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.traceId = iprot.readI64();
              struct.setTraceIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REQUEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.request = iprot.readString();
              struct.setRequestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // START_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTimestamp = iprot.readI64();
              struct.setStartTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // END_TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTimestamp = iprot.readI64();
              struct.setEndTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DURATION
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.duration = iprot.readI64();
              struct.setDurationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // FAILED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.failed = iprot.readBool();
              struct.setFailedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ENTRY_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.entryPoint = iprot.readBool();
              struct.setEntryPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRANSACTION_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.transactionType = TTransactionType.findByValue(iprot.readI32());
              struct.setTransactionTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // TRANSACTION_SUMMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.transactionSummary = iprot.readBinary();
              struct.setTransactionSummaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // ENDPOINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.endpoint = new TEndpoint();
              struct.endpoint.read(iprot);
              struct.setEndpointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // ASYNCHRONOUS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.asynchronous = iprot.readBool();
              struct.setAsynchronousIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // CALLS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.calls = new ArrayList<TCall>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  TCall _elem38; // required
                  _elem38 = new TCall();
                  _elem38.read(iprot);
                  struct.calls.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setCallsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // FAILURE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failureType = TFailureType.findByValue(iprot.readI32());
              struct.setFailureTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // EXCEPTION_STACK_TRACE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exceptionStackTrace = iprot.readBinary();
              struct.setExceptionStackTraceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map39 = iprot.readMapBegin();
                struct.parameters = new HashMap<String,String>(2*_map39.size);
                for (int _i40 = 0; _i40 < _map39.size; ++_i40)
                {
                  String _key41; // required
                  String _val42; // required
                  _key41 = iprot.readString();
                  _val42 = iprot.readString();
                  struct.parameters.put(_key41, _val42);
                }
                iprot.readMapEnd();
              }
              struct.setParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetCallId()) {
        throw new TProtocolException("Required field 'callId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetParentCallId()) {
        throw new TProtocolException("Required field 'parentCallId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetTraceId()) {
        throw new TProtocolException("Required field 'traceId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetStartTimestamp()) {
        throw new TProtocolException("Required field 'startTimestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEndTimestamp()) {
        throw new TProtocolException("Required field 'endTimestamp' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDuration()) {
        throw new TProtocolException("Required field 'duration' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEntryPoint()) {
        throw new TProtocolException("Required field 'entryPoint' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TPartialTransaction struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CALL_ID_FIELD_DESC);
      oprot.writeI64(struct.callId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARENT_CALL_ID_FIELD_DESC);
      oprot.writeI64(struct.parentCallId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.traceId);
      oprot.writeFieldEnd();
      if (struct.request != null) {
        if (struct.isSetRequest()) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          oprot.writeString(struct.request);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(START_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.endTimestamp);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DURATION_FIELD_DESC);
      oprot.writeI64(struct.duration);
      oprot.writeFieldEnd();
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.isSetFailed()) {
        oprot.writeFieldBegin(FAILED_FIELD_DESC);
        oprot.writeBool(struct.failed);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(ENTRY_POINT_FIELD_DESC);
      oprot.writeBool(struct.entryPoint);
      oprot.writeFieldEnd();
      if (struct.transactionType != null) {
        oprot.writeFieldBegin(TRANSACTION_TYPE_FIELD_DESC);
        oprot.writeI32(struct.transactionType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.transactionSummary != null) {
        if (struct.isSetTransactionSummary()) {
          oprot.writeFieldBegin(TRANSACTION_SUMMARY_FIELD_DESC);
          oprot.writeBinary(struct.transactionSummary);
          oprot.writeFieldEnd();
        }
      }
      if (struct.endpoint != null) {
        if (struct.isSetEndpoint()) {
          oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
          struct.endpoint.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetAsynchronous()) {
        oprot.writeFieldBegin(ASYNCHRONOUS_FIELD_DESC);
        oprot.writeBool(struct.asynchronous);
        oprot.writeFieldEnd();
      }
      if (struct.calls != null) {
        oprot.writeFieldBegin(CALLS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.calls.size()));
          for (TCall _iter43 : struct.calls)
          {
            _iter43.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.failureType != null) {
        if (struct.isSetFailureType()) {
          oprot.writeFieldBegin(FAILURE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.failureType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.exceptionStackTrace != null) {
        if (struct.isSetExceptionStackTrace()) {
          oprot.writeFieldBegin(EXCEPTION_STACK_TRACE_FIELD_DESC);
          oprot.writeBinary(struct.exceptionStackTrace);
          oprot.writeFieldEnd();
        }
      }
      if (struct.parameters != null) {
        if (struct.isSetParameters()) {
          oprot.writeFieldBegin(PARAMETERS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.parameters.size()));
            for (Map.Entry<String, String> _iter44 : struct.parameters.entrySet())
            {
              oprot.writeString(_iter44.getKey());
              oprot.writeString(_iter44.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TPartialTransactionTupleSchemeFactory implements SchemeFactory {
    public TPartialTransactionTupleScheme getScheme() {
      return new TPartialTransactionTupleScheme();
    }
  }

  private static class TPartialTransactionTupleScheme extends TupleScheme<TPartialTransaction> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TPartialTransaction struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.callId);
      oprot.writeI64(struct.parentCallId);
      oprot.writeI64(struct.traceId);
      oprot.writeI64(struct.startTimestamp);
      oprot.writeI64(struct.endTimestamp);
      oprot.writeI64(struct.duration);
      oprot.writeString(struct.token);
      oprot.writeBool(struct.entryPoint);
      oprot.writeI32(struct.transactionType.getValue());
      {
        oprot.writeI32(struct.calls.size());
        for (TCall _iter45 : struct.calls)
        {
          _iter45.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetRequest()) {
        optionals.set(0);
      }
      if (struct.isSetFailed()) {
        optionals.set(1);
      }
      if (struct.isSetTransactionSummary()) {
        optionals.set(2);
      }
      if (struct.isSetEndpoint()) {
        optionals.set(3);
      }
      if (struct.isSetAsynchronous()) {
        optionals.set(4);
      }
      if (struct.isSetFailureType()) {
        optionals.set(5);
      }
      if (struct.isSetExceptionStackTrace()) {
        optionals.set(6);
      }
      if (struct.isSetParameters()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetRequest()) {
        oprot.writeString(struct.request);
      }
      if (struct.isSetFailed()) {
        oprot.writeBool(struct.failed);
      }
      if (struct.isSetTransactionSummary()) {
        oprot.writeBinary(struct.transactionSummary);
      }
      if (struct.isSetEndpoint()) {
        struct.endpoint.write(oprot);
      }
      if (struct.isSetAsynchronous()) {
        oprot.writeBool(struct.asynchronous);
      }
      if (struct.isSetFailureType()) {
        oprot.writeI32(struct.failureType.getValue());
      }
      if (struct.isSetExceptionStackTrace()) {
        oprot.writeBinary(struct.exceptionStackTrace);
      }
      if (struct.isSetParameters()) {
        {
          oprot.writeI32(struct.parameters.size());
          for (Map.Entry<String, String> _iter46 : struct.parameters.entrySet())
          {
            oprot.writeString(_iter46.getKey());
            oprot.writeString(_iter46.getValue());
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TPartialTransaction struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.callId = iprot.readI64();
      struct.setCallIdIsSet(true);
      struct.parentCallId = iprot.readI64();
      struct.setParentCallIdIsSet(true);
      struct.traceId = iprot.readI64();
      struct.setTraceIdIsSet(true);
      struct.startTimestamp = iprot.readI64();
      struct.setStartTimestampIsSet(true);
      struct.endTimestamp = iprot.readI64();
      struct.setEndTimestampIsSet(true);
      struct.duration = iprot.readI64();
      struct.setDurationIsSet(true);
      struct.token = iprot.readString();
      struct.setTokenIsSet(true);
      struct.entryPoint = iprot.readBool();
      struct.setEntryPointIsSet(true);
      struct.transactionType = TTransactionType.findByValue(iprot.readI32());
      struct.setTransactionTypeIsSet(true);
      {
        org.apache.thrift.protocol.TList _list47 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.calls = new ArrayList<TCall>(_list47.size);
        for (int _i48 = 0; _i48 < _list47.size; ++_i48)
        {
          TCall _elem49; // required
          _elem49 = new TCall();
          _elem49.read(iprot);
          struct.calls.add(_elem49);
        }
      }
      struct.setCallsIsSet(true);
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.request = iprot.readString();
        struct.setRequestIsSet(true);
      }
      if (incoming.get(1)) {
        struct.failed = iprot.readBool();
        struct.setFailedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.transactionSummary = iprot.readBinary();
        struct.setTransactionSummaryIsSet(true);
      }
      if (incoming.get(3)) {
        struct.endpoint = new TEndpoint();
        struct.endpoint.read(iprot);
        struct.setEndpointIsSet(true);
      }
      if (incoming.get(4)) {
        struct.asynchronous = iprot.readBool();
        struct.setAsynchronousIsSet(true);
      }
      if (incoming.get(5)) {
        struct.failureType = TFailureType.findByValue(iprot.readI32());
        struct.setFailureTypeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.exceptionStackTrace = iprot.readBinary();
        struct.setExceptionStackTraceIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.parameters = new HashMap<String,String>(2*_map50.size);
          for (int _i51 = 0; _i51 < _map50.size; ++_i51)
          {
            String _key52; // required
            String _val53; // required
            _key52 = iprot.readString();
            _val53 = iprot.readString();
            struct.parameters.put(_key52, _val53);
          }
        }
        struct.setParametersIsSet(true);
      }
    }
  }

}

