/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.sematext.spm.client.tracing.thrift;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TSolrAnnotation implements org.apache.thrift.TBase<TSolrAnnotation, TSolrAnnotation._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSolrAnnotation");

  private static final org.apache.thrift.protocol.TField COLLECTION_FIELD_DESC = new org.apache.thrift.protocol.TField("collection", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCEED_FIELD_DESC = new org.apache.thrift.protocol.TField("succeed", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RESPONSE_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("responseStatus", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField REQUEST_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("requestType", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField PARAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("params", org.apache.thrift.protocol.TType.MAP, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TSolrAnnotationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TSolrAnnotationTupleSchemeFactory());
  }

  public String collection; // optional
  public boolean succeed; // required
  public String url; // required
  public short responseStatus; // required
  /**
   * 
   * @see TSolrRequestType
   */
  public TSolrRequestType requestType; // required
  public Map<String,String> params; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    COLLECTION((short)1, "collection"),
    SUCCEED((short)2, "succeed"),
    URL((short)3, "url"),
    RESPONSE_STATUS((short)4, "responseStatus"),
    /**
     * 
     * @see TSolrRequestType
     */
    REQUEST_TYPE((short)5, "requestType"),
    PARAMS((short)6, "params");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // COLLECTION
          return COLLECTION;
        case 2: // SUCCEED
          return SUCCEED;
        case 3: // URL
          return URL;
        case 4: // RESPONSE_STATUS
          return RESPONSE_STATUS;
        case 5: // REQUEST_TYPE
          return REQUEST_TYPE;
        case 6: // PARAMS
          return PARAMS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCEED_ISSET_ID = 0;
  private static final int __RESPONSESTATUS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.COLLECTION};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.COLLECTION, new org.apache.thrift.meta_data.FieldMetaData("collection", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCEED, new org.apache.thrift.meta_data.FieldMetaData("succeed", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RESPONSE_STATUS, new org.apache.thrift.meta_data.FieldMetaData("responseStatus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.REQUEST_TYPE, new org.apache.thrift.meta_data.FieldMetaData("requestType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TSolrRequestType.class)));
    tmpMap.put(_Fields.PARAMS, new org.apache.thrift.meta_data.FieldMetaData("params", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSolrAnnotation.class, metaDataMap);
  }

  public TSolrAnnotation() {
  }

  public TSolrAnnotation(
    boolean succeed,
    String url,
    short responseStatus,
    TSolrRequestType requestType,
    Map<String,String> params)
  {
    this();
    this.succeed = succeed;
    setSucceedIsSet(true);
    this.url = url;
    this.responseStatus = responseStatus;
    setResponseStatusIsSet(true);
    this.requestType = requestType;
    this.params = params;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSolrAnnotation(TSolrAnnotation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCollection()) {
      this.collection = other.collection;
    }
    this.succeed = other.succeed;
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    this.responseStatus = other.responseStatus;
    if (other.isSetRequestType()) {
      this.requestType = other.requestType;
    }
    if (other.isSetParams()) {
      Map<String,String> __this__params = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.params.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__params_copy_key = other_element_key;

        String __this__params_copy_value = other_element_value;

        __this__params.put(__this__params_copy_key, __this__params_copy_value);
      }
      this.params = __this__params;
    }
  }

  public TSolrAnnotation deepCopy() {
    return new TSolrAnnotation(this);
  }

  @Override
  public void clear() {
    this.collection = null;
    setSucceedIsSet(false);
    this.succeed = false;
    this.url = null;
    setResponseStatusIsSet(false);
    this.responseStatus = 0;
    this.requestType = null;
    this.params = null;
  }

  public String getCollection() {
    return this.collection;
  }

  public TSolrAnnotation setCollection(String collection) {
    this.collection = collection;
    return this;
  }

  public void unsetCollection() {
    this.collection = null;
  }

  /** Returns true if field collection is set (has been assigned a value) and false otherwise */
  public boolean isSetCollection() {
    return this.collection != null;
  }

  public void setCollectionIsSet(boolean value) {
    if (!value) {
      this.collection = null;
    }
  }

  public boolean isSucceed() {
    return this.succeed;
  }

  public TSolrAnnotation setSucceed(boolean succeed) {
    this.succeed = succeed;
    setSucceedIsSet(true);
    return this;
  }

  public void unsetSucceed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCEED_ISSET_ID);
  }

  /** Returns true if field succeed is set (has been assigned a value) and false otherwise */
  public boolean isSetSucceed() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCEED_ISSET_ID);
  }

  public void setSucceedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCEED_ISSET_ID, value);
  }

  public String getUrl() {
    return this.url;
  }

  public TSolrAnnotation setUrl(String url) {
    this.url = url;
    return this;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public short getResponseStatus() {
    return this.responseStatus;
  }

  public TSolrAnnotation setResponseStatus(short responseStatus) {
    this.responseStatus = responseStatus;
    setResponseStatusIsSet(true);
    return this;
  }

  public void unsetResponseStatus() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RESPONSESTATUS_ISSET_ID);
  }

  /** Returns true if field responseStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetResponseStatus() {
    return EncodingUtils.testBit(__isset_bitfield, __RESPONSESTATUS_ISSET_ID);
  }

  public void setResponseStatusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RESPONSESTATUS_ISSET_ID, value);
  }

  /**
   * 
   * @see TSolrRequestType
   */
  public TSolrRequestType getRequestType() {
    return this.requestType;
  }

  /**
   * 
   * @see TSolrRequestType
   */
  public TSolrAnnotation setRequestType(TSolrRequestType requestType) {
    this.requestType = requestType;
    return this;
  }

  public void unsetRequestType() {
    this.requestType = null;
  }

  /** Returns true if field requestType is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestType() {
    return this.requestType != null;
  }

  public void setRequestTypeIsSet(boolean value) {
    if (!value) {
      this.requestType = null;
    }
  }

  public int getParamsSize() {
    return (this.params == null) ? 0 : this.params.size();
  }

  public void putToParams(String key, String val) {
    if (this.params == null) {
      this.params = new HashMap<String,String>();
    }
    this.params.put(key, val);
  }

  public Map<String,String> getParams() {
    return this.params;
  }

  public TSolrAnnotation setParams(Map<String,String> params) {
    this.params = params;
    return this;
  }

  public void unsetParams() {
    this.params = null;
  }

  /** Returns true if field params is set (has been assigned a value) and false otherwise */
  public boolean isSetParams() {
    return this.params != null;
  }

  public void setParamsIsSet(boolean value) {
    if (!value) {
      this.params = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case COLLECTION:
      if (value == null) {
        unsetCollection();
      } else {
        setCollection((String)value);
      }
      break;

    case SUCCEED:
      if (value == null) {
        unsetSucceed();
      } else {
        setSucceed((Boolean)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case RESPONSE_STATUS:
      if (value == null) {
        unsetResponseStatus();
      } else {
        setResponseStatus((Short)value);
      }
      break;

    case REQUEST_TYPE:
      if (value == null) {
        unsetRequestType();
      } else {
        setRequestType((TSolrRequestType)value);
      }
      break;

    case PARAMS:
      if (value == null) {
        unsetParams();
      } else {
        setParams((Map<String,String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case COLLECTION:
      return getCollection();

    case SUCCEED:
      return Boolean.valueOf(isSucceed());

    case URL:
      return getUrl();

    case RESPONSE_STATUS:
      return Short.valueOf(getResponseStatus());

    case REQUEST_TYPE:
      return getRequestType();

    case PARAMS:
      return getParams();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case COLLECTION:
      return isSetCollection();
    case SUCCEED:
      return isSetSucceed();
    case URL:
      return isSetUrl();
    case RESPONSE_STATUS:
      return isSetResponseStatus();
    case REQUEST_TYPE:
      return isSetRequestType();
    case PARAMS:
      return isSetParams();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TSolrAnnotation)
      return this.equals((TSolrAnnotation)that);
    return false;
  }

  public boolean equals(TSolrAnnotation that) {
    if (that == null)
      return false;

    boolean this_present_collection = true && this.isSetCollection();
    boolean that_present_collection = true && that.isSetCollection();
    if (this_present_collection || that_present_collection) {
      if (!(this_present_collection && that_present_collection))
        return false;
      if (!this.collection.equals(that.collection))
        return false;
    }

    boolean this_present_succeed = true;
    boolean that_present_succeed = true;
    if (this_present_succeed || that_present_succeed) {
      if (!(this_present_succeed && that_present_succeed))
        return false;
      if (this.succeed != that.succeed)
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_responseStatus = true;
    boolean that_present_responseStatus = true;
    if (this_present_responseStatus || that_present_responseStatus) {
      if (!(this_present_responseStatus && that_present_responseStatus))
        return false;
      if (this.responseStatus != that.responseStatus)
        return false;
    }

    boolean this_present_requestType = true && this.isSetRequestType();
    boolean that_present_requestType = true && that.isSetRequestType();
    if (this_present_requestType || that_present_requestType) {
      if (!(this_present_requestType && that_present_requestType))
        return false;
      if (!this.requestType.equals(that.requestType))
        return false;
    }

    boolean this_present_params = true && this.isSetParams();
    boolean that_present_params = true && that.isSetParams();
    if (this_present_params || that_present_params) {
      if (!(this_present_params && that_present_params))
        return false;
      if (!this.params.equals(that.params))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TSolrAnnotation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TSolrAnnotation typedOther = (TSolrAnnotation)other;

    lastComparison = Boolean.valueOf(isSetCollection()).compareTo(typedOther.isSetCollection());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCollection()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.collection, typedOther.collection);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSucceed()).compareTo(typedOther.isSetSucceed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSucceed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.succeed, typedOther.succeed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUrl()).compareTo(typedOther.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, typedOther.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetResponseStatus()).compareTo(typedOther.isSetResponseStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResponseStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.responseStatus, typedOther.responseStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRequestType()).compareTo(typedOther.isSetRequestType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestType, typedOther.requestType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetParams()).compareTo(typedOther.isSetParams());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParams()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.params, typedOther.params);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TSolrAnnotation(");
    boolean first = true;

    if (isSetCollection()) {
      sb.append("collection:");
      if (this.collection == null) {
        sb.append("null");
      } else {
        sb.append(this.collection);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("succeed:");
    sb.append(this.succeed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("responseStatus:");
    sb.append(this.responseStatus);
    first = false;
    if (!first) sb.append(", ");
    sb.append("requestType:");
    if (this.requestType == null) {
      sb.append("null");
    } else {
      sb.append(this.requestType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("params:");
    if (this.params == null) {
      sb.append("null");
    } else {
      sb.append(this.params);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // alas, we cannot check 'succeed' because it's a primitive and you chose the non-beans generator.
    if (url == null) {
      throw new TProtocolException("Required field 'url' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'responseStatus' because it's a primitive and you chose the non-beans generator.
    if (requestType == null) {
      throw new TProtocolException("Required field 'requestType' was not present! Struct: " + toString());
    }
    if (params == null) {
      throw new TProtocolException("Required field 'params' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSolrAnnotationStandardSchemeFactory implements SchemeFactory {
    public TSolrAnnotationStandardScheme getScheme() {
      return new TSolrAnnotationStandardScheme();
    }
  }

  private static class TSolrAnnotationStandardScheme extends StandardScheme<TSolrAnnotation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSolrAnnotation struct) throws TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // COLLECTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.collection = iprot.readString();
              struct.setCollectionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCEED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.succeed = iprot.readBool();
              struct.setSucceedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESPONSE_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.responseStatus = iprot.readI16();
              struct.setResponseStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REQUEST_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.requestType = TSolrRequestType.findByValue(iprot.readI32());
              struct.setRequestTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PARAMS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map16 = iprot.readMapBegin();
                struct.params = new HashMap<String,String>(2*_map16.size);
                for (int _i17 = 0; _i17 < _map16.size; ++_i17)
                {
                  String _key18; // required
                  String _val19; // required
                  _key18 = iprot.readString();
                  _val19 = iprot.readString();
                  struct.params.put(_key18, _val19);
                }
                iprot.readMapEnd();
              }
              struct.setParamsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSucceed()) {
        throw new TProtocolException("Required field 'succeed' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetResponseStatus()) {
        throw new TProtocolException("Required field 'responseStatus' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSolrAnnotation struct) throws TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.collection != null) {
        if (struct.isSetCollection()) {
          oprot.writeFieldBegin(COLLECTION_FIELD_DESC);
          oprot.writeString(struct.collection);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(SUCCEED_FIELD_DESC);
      oprot.writeBool(struct.succeed);
      oprot.writeFieldEnd();
      if (struct.url != null) {
        oprot.writeFieldBegin(URL_FIELD_DESC);
        oprot.writeString(struct.url);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RESPONSE_STATUS_FIELD_DESC);
      oprot.writeI16(struct.responseStatus);
      oprot.writeFieldEnd();
      if (struct.requestType != null) {
        oprot.writeFieldBegin(REQUEST_TYPE_FIELD_DESC);
        oprot.writeI32(struct.requestType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.params != null) {
        oprot.writeFieldBegin(PARAMS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.params.size()));
          for (Map.Entry<String, String> _iter20 : struct.params.entrySet())
          {
            oprot.writeString(_iter20.getKey());
            oprot.writeString(_iter20.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSolrAnnotationTupleSchemeFactory implements SchemeFactory {
    public TSolrAnnotationTupleScheme getScheme() {
      return new TSolrAnnotationTupleScheme();
    }
  }

  private static class TSolrAnnotationTupleScheme extends TupleScheme<TSolrAnnotation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSolrAnnotation struct) throws TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeBool(struct.succeed);
      oprot.writeString(struct.url);
      oprot.writeI16(struct.responseStatus);
      oprot.writeI32(struct.requestType.getValue());
      {
        oprot.writeI32(struct.params.size());
        for (Map.Entry<String, String> _iter21 : struct.params.entrySet())
        {
          oprot.writeString(_iter21.getKey());
          oprot.writeString(_iter21.getValue());
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetCollection()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetCollection()) {
        oprot.writeString(struct.collection);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSolrAnnotation struct) throws TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.succeed = iprot.readBool();
      struct.setSucceedIsSet(true);
      struct.url = iprot.readString();
      struct.setUrlIsSet(true);
      struct.responseStatus = iprot.readI16();
      struct.setResponseStatusIsSet(true);
      struct.requestType = TSolrRequestType.findByValue(iprot.readI32());
      struct.setRequestTypeIsSet(true);
      {
        org.apache.thrift.protocol.TMap _map22 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
        struct.params = new HashMap<String,String>(2*_map22.size);
        for (int _i23 = 0; _i23 < _map22.size; ++_i23)
        {
          String _key24; // required
          String _val25; // required
          _key24 = iprot.readString();
          _val25 = iprot.readString();
          struct.params.put(_key24, _val25);
        }
      }
      struct.setParamsIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.collection = iprot.readString();
        struct.setCollectionIsSet(true);
      }
    }
  }

}

