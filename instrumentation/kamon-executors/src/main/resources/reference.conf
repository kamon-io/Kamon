###############################################
#   Kamon Executors Reference Configuration   #
###############################################

kamon.instrumentation.executor {

  # Interval at which all instrumented executor metrics will be sampled.
  sample-interval = 500 milliseconds

}

kanela.modules {

  executor-service {
    name = "Executor Service Instrumentation"
    description =
      """Provides automatic Context propagation to all non-JDK Runnable and Callable implementations which enables
         Context propagation on serveral situations, including Scala, Twitter and Scalaz Futures"""

    instrumentations = [
      "kamon.instrumentation.executor.ExecutorTaskInstrumentation",
      "kamon.instrumentation.executor.ScalaGlobalExecutionContextInstrumentation"
    ]

    exclude = [
      "^java.*",
      "^sun.*",
      "^com.sun.tools.*",
      "^sbt.internal.*",
      "^com.intellij.rt.*",
      "^org.jboss.netty.*",
      "^com.google.common.base.internal.Finalizer",
      "^kamon.module.*",
      "^kamon.instrumentation.executor.ExecutorInstrumentation.*",
      "^kanela.agent.*"
    ]

    within = [
      "scala.concurrent.ExecutionContext\\$",
      "scala.concurrent.ExecutionContext\\$Implicits\\$"
    ]
  }

  executor-service-capture-on-submit {
    enabled = false
    disable-class-format-changes = true
    name = "Executor Service Capture on Submit Instrumentation"
    description =
      """Experimental. Provides automatic context propagation by capturing the current context at the instant when a
         Runnable/Callable is submitted for execution by instrumenting the executors themselves, including JDK classes"""

    instrumentations = [
      "kamon.instrumentation.executor.CaptureContextOnSubmitInstrumentation"
    ]

    bootstrap-injection {
      enabled = true
      helper-class-names = []
    }

    within = [
      "java.util.concurrent..*",
      "com.google.common.util.concurrent..*",
      "scala.concurrent.forkjoin.ForkJoinPool"
    ]
  }
}