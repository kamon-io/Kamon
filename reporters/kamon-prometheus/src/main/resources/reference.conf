# ======================================== #
# kamon-prometheus reference configuration #
# ======================================== #

kamon.prometheus {

  # Enable or disable publishing the Prometheus scraping enpoint using a embedded server.
  start-embedded-http-server = yes

  # Enable or disable including tags from kamon.environment.tags as labels
  # reference: https://github.com/kamon-io/Kamon/blob/master/core/kamon-core/src/main/resources/reference.conf#L23
  include-environment-tags = no

  buckets {
    default-buckets = [
      10,
      30,
      100,
      300,
      1000,
      3000,
      10000,
      30000,
      100000
    ]

    time-buckets = [
      0.005,
      0.01,
      0.025,
      0.05,
      0.075,
      0.1,
      0.25,
      0.5,
      0.75,
      1,
      2.5,
      5,
      7.5,
      10
    ]

    information-buckets = [
      512,
      1024,
      2048,
      4096,
      16384,
      65536,
      524288,
      1048576
    ]

    # Per metric overrides are possible by specifying the metric name and the histogram buckets here
    custom {
      // example:
      // "akka.actor.processing-time" = [0.1, 1.0, 10.0]
    }
  }

  summaries {
    # Names of the histogram, timer and range sampler metrics that must be exported as summaries. All patterns are treated as Glob patterns.
    metrics = [
      # example:
      # "request*",
      # "*akka*"
    ]

    # Names of the histograms, timer and range sampler metrics that shouldn't be exported as summaries,
    # even when they are included in the "metrics" configuration. All patterns are treated as Glob patterns.
    metrics-excludes = [
      # example:
      # "request-size*"
    ]

    # Quantiles that should be reported (will be translated to the according percentiles)
    quantiles = [
      0.5,
      0.75,
      0.95,
      0.99,
      0.999
    ]
  }

  gauges {
    # Names of the histogram, timer and range sampler metrics that shall be exported as a gauges as well.
    # For each matching metric there will be three gauges representing the current seen distribution (min, max, avg)
    # All patterns are treated as Glob patterns.
    metrics = [
      # example:
      # "http.server*",
      # "*akka*"
    ]
  }

  embedded-server {

    # Hostname and port used by the embedded web server to publish the scraping enpoint.
    hostname = "0.0.0.0"
    port = 9095
    metrics-path = "/metrics"

    # embedded server impl
    # choose between
    # - sun ->using openjdk/jdk com.sun.net.httpserver
    # - anyFQCN ->classname of a subclass of kamon.prometheus.EmbeddedHttpServer
    impl = "sun"
  }

  # Specify metric name overrides here
  metric-overrides {
    // example:
    //  "span.processing-time" {
    //    name = new-name
    //
    //    delete-tags = [
    //      tag-name
    //    ]
    //
    //    rename-tags {
    //      "tag-name" = new-tag-name
    //    }
    //  }
  }

  #
  # Settings relevant to the PrometheusPushgatewayReporter
  #
  pushgateway {
      # Default URL (https://github.com/prometheus/pushgateway#api)
      api-url = "http://localhost:9091/metrics/job/example"

      # HTTP client timeout settings:
      #   - connect-timeout: how long to wait for an HTTP connection to establish before failing the request.
      #   - read-timeout: how long to wait for a read IO operation to complete before failing the request.
      #   - write-timeout: how long to wait for a write IO operation to complete before failing the request.
      #
      connect-timeout = 5 seconds
      read-timeout = 5 seconds
      write-timeout = 5 seconds
  }
}


kamon.modules {
  prometheus-reporter {
    enabled = true
    name = "Prometheus Reporter"
    description = "Exposes a scrape endpoint for Prometheus"
    factory = "kamon.prometheus.PrometheusReporter$Factory"
  }

  pushgateway-reporter {
    enabled = false
    name = "Prometheus Pushgateway Reporter"
    description = "Pushes metrics to Prometheus Pushgateway"
    factory = "kamon.prometheus.PrometheusPushgatewayReporter$Factory"
  }
}
