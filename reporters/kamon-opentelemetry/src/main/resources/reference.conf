# ======================================== #
# kamon-otlp reference configuration       #
# ======================================== #

kamon.otel {
  # default to support the ENV:s as described at
  # https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/protocol/exporter.md
  endpoint = "http://localhost:4317"
  endpoint = ${?OTEL_EXPORTER_OTLP_ENDPOINT}

  # Supports empty string or gzip
  compression = ""
  compression = ${?OTEL_EXPORTER_OTLP_COMPRESSION}

  # Supports comma-separated pairs (i.e "api-key=supersecret,data-type=application-traces")
  headers = ""
  headers = ${?OTEL_EXPORTER_OTLP_HEADERS}

  timeout = 10s
  timeout = ${?OTEL_EXPORTER_OTLP_TIMEOUT}

  # Supports grpc and http/protobuf
  protocol = "grpc"
  protocol = ${?OTEL_EXPORTER_OTLP_PROTOCOL}

  # Support for OTEL_RESOURCE_ATTRIBUTES env var (cf https://opentelemetry.io/docs/reference/specification/resource/sdk/)
  attributes = ""
  attributes = ${?OTEL_RESOURCE_ATTRIBUTES}

  metrics {
      endpoint = ${kamon.otel.endpoint}
      full-endpoint = ${?OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}

      compression = ${kamon.otel.compression}
      compression = ${?OTEL_EXPORTER_OTLP_METRICS_COMPRESSION}

      headers = ${kamon.otel.headers}
      headers = ${?OTEL_EXPORTER_OTLP_METRICS_HEADERS}

      timeout = ${kamon.otel.timeout}
      timeout = ${?OTEL_EXPORTER_OTLP_METRICS_TIMEOUT}

      protocol = ${kamon.otel.protocol}
      protocol = ${?OTEL_EXPORTER_OTLP_METRICS_PROTOCOL}

      # explicit_bucket_histogram or base2_exponential_bucket_histogram
      histogram-format = explicit_bucket_histogram
      histogram-format = ${?OTEL_EXPORTER_OTLP_METRICS_DEFAULT_HISTOGRAM_AGGREGATION}
  }

  trace {
      endpoint = ${kamon.otel.endpoint}
      full-endpoint = ${?OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}

      compression = ${kamon.otel.compression}
      compression = ${?OTEL_EXPORTER_OTLP_TRACES_COMPRESSION}

      headers = ${kamon.otel.headers}
      headers = ${?OTEL_EXPORTER_OTLP_TRACES_HEADERS}

      timeout = ${kamon.otel.timeout}
      timeout = ${?OTEL_EXPORTER_OTLP_TRACES_TIMEOUT}

      protocol = ${kamon.otel.protocol}
      protocol = ${?OTEL_EXPORTER_OTLP_TRACES_PROTOCOL}

      # If set to true, any error (message and stacktrace) on a span will be included as an event on the span with
      # standard attribute names; enable for 'more full' compliance with otel standard
      include-error-event = false
  }

  explicit-histo-boundaries {
    # Same as defaults from https://opentelemetry.io/docs/specs/otel/metrics/sdk/#explicit-bucket-histogram-aggregation
    default-buckets = [
      0, 5, 10, 25, 50, 75, 100, 250, 500, 750, 1000, 2500, 5000, 7500, 10000
    ]

    # The following are the same as for the prometheus reporter default values
    time-buckets = [
      0.005, 0.01, 0.025, 0.05, 0.075, 0.1, 0.25, 0.5, 0.75, 1, 2.5, 5, 7.5, 10
    ]

    information-buckets = [
      512, 1024, 2048, 4096, 16384, 65536, 524288, 1048576
    ]

    percentage-buckets = [
      20, 40, 60, 70, 80, 90, 95
    ]

    # Per metric overrides are possible by specifying the metric name and the histogram buckets here
    custom {
      // example:
      // "akka.actor.processing-time" = [0.1, 1.0, 10.0]
    }
  }

  exponential-histo-boundaries {
    default-bucket-count = 160

    time-bucket-count = 160

    information-bucket-count = 160

    percentage-bucket-count = 100

    # Per metric overrides are possible by specifying the metric name and the histogram buckets here
    custom {
      // example:
      // "akka.actor.processing-time" = 3
    }
  }
}

# Arbitrary key-value pairs that further identify the environment where this service instance is running.
# These are added as KeyValue labels to the Resource part of the exported traces
#
# kamon.environment.tags {
#   service {
#     version = "x.x.x"
#     namespace = "ns"
#     instance.id = "xxx-yyy"
#   }
# }

kamon.modules {
  otel-trace-reporter {
    enabled = true
    name = "OpenTelemetry Trace Reporter"
    description = "Sends trace data to a OpenTelemetry server via gRPC/HTTP+protobuf"
    factory = "kamon.otel.OpenTelemetryTraceReporter$Factory"
  }
  otel-metrics-reporter {
    enabled = true
    name = "OpenTelemetry Metrics Reporter"
    description = "Sends metrics data to a OpenTelemetry server via gRPC/HTTP+protobuf"
    factory = "kamon.otel.OpenTelemetryMetricsReporter$Factory"
  }
}
